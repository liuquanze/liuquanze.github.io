{"total":138,"pageSize":12,"pageCount":12,"data":[{"title":"comeback","uid":"cd0117f6419930cc841d1b89ddc82953","slug":"comeback","date":"2023-12-14T13:08:22.000Z","updated":"2023-12-14T13:10:25.425Z","comments":true,"path":"api/articles/comeback.json","cover":null,"text":"我又回来了长时间没有写的，都快忘记怎么用了。 ","link":"","photos":[],"count_time":{"symbolsCount":23,"symbolsTime":"1 mins."},"categories":[{"name":"个人日志","slug":"个人日志","count":1,"path":"api/categories/个人日志.json"}],"tags":[{"name":"日常","slug":"日常","count":2,"path":"api/tags/日常.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"LSTNet代码","uid":"21f0fb1c21f5c84a95aeb0eb674c5fc8","slug":"LSTNet代码","date":"2023-02-01T12:55:05.000Z","updated":"2023-02-01T13:30:18.256Z","comments":true,"path":"api/articles/LSTNet代码.json","cover":null,"text":" tensorflow ####################################################################################################################### # End AR...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"01背包理论基础02","uid":"a684fe7136f12073d2c44da23dc49f83","slug":"01背包理论基础02","date":"2023-01-31T06:31:17.000Z","updated":"2023-01-31T06:42:27.179Z","comments":true,"path":"api/articles/01背包理论基础02.json","cover":null,"text":"01背包理论基础02题目描述：有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。 背包问题（一维数组d实现，滚动数组）对于背包问题其实状态都是可以压缩的。 ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"01背包理论基础01","uid":"3a52c682a4c8facad241eff5c291da03","slug":"01背包理论基础01","date":"2023-01-30T04:38:37.000Z","updated":"2023-01-31T06:31:40.023Z","comments":true,"path":"api/articles/01背包理论基础01.json","cover":null,"text":"01背包理论基础01题目描述：有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。 确定dp数组以及下标的含义 对于背包问题，有一种写法， 是使用二维数组，即...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"84.柱状图中最大的矩形","uid":"5ddbb467241068095a0f1672c50c32fb","slug":"84-柱状图中最大的矩形","date":"2023-01-26T03:16:19.000Z","updated":"2023-01-26T03:18:31.822Z","comments":true,"path":"api/articles/84-柱状图中最大的矩形.json","cover":null,"text":"84.柱状图中最大的矩形题目描述： 柱状图中最大的矩形 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。 example 1: 输入：heights &#x3D; [2,1,5,6,2,3] ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"42.接雨水","uid":"dd718835733ef3d35103f48df96ec332","slug":"42-接雨水","date":"2023-01-25T03:29:06.000Z","updated":"2023-01-25T03:33:01.335Z","comments":true,"path":"api/articles/42-接雨水.json","cover":null,"text":"题目描述： 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水 example1: 输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1] 输出：6 解释：上面是由数组 [0,1,0,2,1,0,...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"496.下一个更大元素Ⅰ","uid":"815fb5e337edfb9e9850c316ed81cdac","slug":"496-下一个更大元素Ⅰ","date":"2023-01-23T04:22:44.000Z","updated":"2023-01-23T04:25:12.781Z","comments":true,"path":"api/articles/496-下一个更大元素Ⅰ.json","cover":null,"text":"496.下一个更大元素Ⅰ问题描述： 下一个更大元素 I nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。 给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"单调栈","slug":"单调栈","count":2,"path":"api/tags/单调栈.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"739.每日温度","uid":"6355be0900ada8ac56a8e9489858559d","slug":"739-每日温度","date":"2023-01-22T14:05:44.000Z","updated":"2023-01-22T14:09:21.400Z","comments":true,"path":"api/articles/739-每日温度.json","cover":null,"text":"739.每日温度问题描述： 每日温度 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。 example 1:...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"单调栈","slug":"单调栈","count":2,"path":"api/tags/单调栈.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"62.不同路径","uid":"c2410b2838d2b960665ad0be86344655","slug":"62-不同路径","date":"2023-01-16T14:31:26.000Z","updated":"2023-01-16T14:34:41.429Z","comments":true,"path":"api/articles/62-不同路径.json","cover":null,"text":"题目描述： 不同路径 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。 问总共有多少条不同的路径？ example 1: 输入：m &...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"509.斐波那契数列","uid":"084b6d4a3eb1719c740e694cde17f8e9","slug":"509-斐波那契数列","date":"2023-01-06T09:13:18.000Z","updated":"2023-01-06T09:16:03.037Z","comments":true,"path":"api/articles/509-斐波那契数列.json","cover":null,"text":"509.斐波那契数列题目描述： 斐波那契数 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) &#x3D; 0，F(1) &#x3D; 1 F(n) &#x3D; F(n -...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"968.监控二叉树","uid":"5898b23515666bc1eaf955d4bf31da9d","slug":"968-监控二叉树","date":"2022-12-27T13:07:30.000Z","updated":"2022-12-27T13:10:31.240Z","comments":true,"path":"api/articles/968-监控二叉树.json","cover":null,"text":"968.监控二叉树1.问题描述： 监控二叉树 给定一个二叉树，我们在树的节点上安装摄像头。 节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。 计算监控树的所有节点所需的最小摄像头数量。 example 1: 输入：[0,0,null,0,0] 输出：1 解释：如图所示，...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"714.买卖股票的最佳时机含手续费","uid":"4d703d6dd28c31c1b1d5c0868f9f4887","slug":"714-买卖股票的最佳时机含手续费","date":"2022-12-25T13:42:08.000Z","updated":"2022-12-25T13:44:28.059Z","comments":true,"path":"api/articles/714-买卖股票的最佳时机含手续费.json","cover":null,"text":"714.买卖股票的最佳时机含手续费问题描述： 买卖股票的最佳时机含手续费 给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}]}