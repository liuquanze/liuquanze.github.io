{"total":130,"pageSize":12,"pageCount":11,"data":[{"title":"134.加油站","uid":"d6d0de907a6cde5432aeecaa7255f84f","slug":"134-加油站","date":"2022-12-16T14:02:43.000Z","updated":"2022-12-16T14:05:41.723Z","comments":true,"path":"api/articles/134-加油站.json","cover":null,"text":"134.加油站题目描述： 加油站 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。 给定两个整数数组 ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"1005.K次取反后最大化的数组和","uid":"684490a86ab5f156b0b9d2e5dc331300","slug":"1005-K次取反后最大化的数组和","date":"2022-12-11T13:26:50.000Z","updated":"2022-12-11T13:29:08.669Z","comments":true,"path":"api/articles/1005-K次取反后最大化的数组和.json","cover":null,"text":"1005.K次取反后最大化的数组和题目描述： K 次取反后最大化的数组和 给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组： 选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。 重复这个过程恰好 k 次。可以多次选择同一个下标 i 。 以这种方...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"45.跳跃游戏Ⅱ","uid":"ba77919bcc2d7461bb50d4a40ab33900","slug":"45-跳跃游戏Ⅱ","date":"2022-12-07T13:21:22.000Z","updated":"2022-12-07T13:23:20.934Z","comments":true,"path":"api/articles/45-跳跃游戏Ⅱ.json","cover":null,"text":"45.跳跃游戏Ⅱ题目描述： 跳跃游戏 II 给你一个非负整数数组 nums ，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 假设你总是可以到达数组的最后一个位置。 example1 ： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"55.跳跃游戏","uid":"533fd882f71315e5bf31b51d128773b6","slug":"55-跳跃游戏","date":"2022-12-05T13:16:58.000Z","updated":"2022-12-05T13:20:09.987Z","comments":true,"path":"api/articles/55-跳跃游戏.json","cover":null,"text":"55.跳跃游戏题目描述： 跳跃游戏 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个下标。 example 1: 输入：nums &#x3D; [2,3,1,1,4] 输出：true...","link":"","photos":[],"count_time":{"symbolsCount":897,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"53.最大子数组和","uid":"616c86b7fd44020d5709f34410a56e33","slug":"53-最大子数组和","date":"2022-12-03T14:21:26.000Z","updated":"2022-12-03T14:24:22.249Z","comments":true,"path":"api/articles/53-最大子数组和.json","cover":null,"text":"53.最大子数组和题目描述： 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部分。 example 1: 输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"376.摆动序列","uid":"872b236e099a38439f77f6b1b2e6e4dd","slug":"376-摆动序列","date":"2022-12-01T15:06:49.000Z","updated":"2022-12-01T15:12:14.867Z","comments":true,"path":"api/articles/376-摆动序列.json","cover":null,"text":"376.摆动序列题目描述： 摆动序列 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。 例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Java并发编程实战-第二章","uid":"d9d4098d77d12fc0df1e3b0cd1199653","slug":"Java并发编程实战-第二章","date":"2022-11-16T13:04:07.000Z","updated":"2022-11-16T13:31:45.963Z","comments":true,"path":"api/articles/Java并发编程实战-第二章.json","cover":null,"text":"Java并发编程实战——第二章【线程安全性】 判断一个对象是否是线程安全的，取决于它是否被多个线程访问 要使得对象是线程安全的，需要采用同步机制来协同对对象的可变状态的访问。 当多个线程访问同一个可变的状态变量时，若没有使用合适的同步，程序可能出现错误，可使用以下三种方式修复这个...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"阅读笔记","slug":"阅读笔记","count":2,"path":"api/categories/阅读笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"Java并发编程实战","slug":"Java并发编程实战","count":2,"path":"api/tags/Java并发编程实战.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Java并发编程实战_第一章","uid":"b4ca66fa8cf36946a93ed492ada823ba","slug":"Java并发编程实战-第一章","date":"2022-11-09T15:25:33.000Z","updated":"2022-11-16T13:06:17.293Z","comments":true,"path":"api/articles/Java并发编程实战-第一章.json","cover":null,"text":"Java并发编程实战——第一章【简介】1.并发简史 早期的计算机仅仅包含一个操作系统，从头到尾仅执行一个程序，并且该程序可访问计算机中所有资源 操作系统的出现使得计算机每次可以运行多个程序 不同的程序在不同的进程中运行 操作系统为每个独立运行的进程分配各种资源：内存、文件句柄、安...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"阅读笔记","slug":"阅读笔记","count":2,"path":"api/categories/阅读笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"Java并发编程实战","slug":"Java并发编程实战","count":2,"path":"api/tags/Java并发编程实战.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"90.子集Ⅱ","uid":"5318d9a835b8dca882f536085827709f","slug":"90-子集Ⅱ","date":"2022-11-09T03:50:16.000Z","updated":"2022-11-09T03:52:54.427Z","comments":true,"path":"api/articles/90-子集Ⅱ.json","cover":null,"text":"90.子集Ⅱ题目描述：90.子集 II 给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。 example 1： 输入：nums &#x3D; [1,2,2] 输出：[...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"78.子集","uid":"73e62cf89f554b3cf0c0c9da24853098","slug":"78-子集","date":"2022-11-07T13:36:20.000Z","updated":"2022-11-07T13:41:29.109Z","comments":true,"path":"api/articles/78-子集.json","cover":null,"text":"78.子集问题描述：给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。 example 1: 输入：nums &#x3D; [1,2,3] 输出：[[],[1],[2],[1,2]...","link":"","photos":[],"count_time":{"symbolsCount":961,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"93.复原IP地址","uid":"2aa2b4cd6cd10ccd2f6292d5d41a250c","slug":"93-复原IP地址","date":"2022-11-05T13:47:14.000Z","updated":"2022-11-05T13:49:44.476Z","comments":true,"path":"api/articles/93-复原IP地址.json","cover":null,"text":"93.复原IP地址问题描述： 复原 IP 地址 有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 &#39;.&#39; 分隔。 例如：&quot;0.1.2.201&quot; 和 &quot;192.168.1.1&q...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"131.分割回文串","uid":"db70d191ef5306eb761eb483c7e9bb07","slug":"131-分割回文串","date":"2022-11-02T15:20:26.000Z","updated":"2022-11-02T15:25:51.208Z","comments":true,"path":"api/articles/131-分割回文串.json","cover":null,"text":"131.分割回文串题目描述： 分割回文串 给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。 回文串 是正着读和反着读都一样的字符串。 example 1： 输入：s &#x3D; &quot;aab&quot; 输出：[[&...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}]}