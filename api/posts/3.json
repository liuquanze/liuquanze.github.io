{"total":53,"pageSize":12,"pageCount":5,"data":[{"title":"有序数组的单一元素","uid":"5a834cb8bdd34deef00d023624eeeb11","slug":"有序数组的单一元素","date":"2022-08-06T02:23:53.000Z","updated":"2022-08-06T02:26:09.675Z","comments":true,"path":"api/articles/有序数组的单一元素.json","cover":null,"text":"540. 有序数组的单一元素题目描述： 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。 请你找出并返回只出现一次的那个数。 你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。 example 1： 输入: nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Pycharm模块不存在","uid":"bf9943093888157a40e49bab81aa424f","slug":"Pycharm模块不存在","date":"2022-08-05T02:33:06.000Z","updated":"2022-08-05T02:39:34.666Z","comments":true,"path":"api/articles/Pycharm模块不存在.json","cover":null,"text":"Pycharm模块不存在问题描述：当运行Python文件时，出现以下报错： python中已经用pip安装了某模块，但pycharm中为什么仍然显示没有该模块 出现原因：pycharm里面自带一个Python解释器，而这个里面是没有几个模块的。因为咱们在DOS命令行里面下载的模块...","link":"","photos":[],"count_time":{"symbolsCount":571,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"报错","slug":"报错","count":3,"path":"api/tags/报错.json"},{"name":"Pycharm","slug":"Pycharm","count":1,"path":"api/tags/Pycharm.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找比目标字母大的最小字母","uid":"d776ea82847944d1f9a7d73d3912befe","slug":"寻找比目标字母大的最小字母","date":"2022-08-05T01:53:07.000Z","updated":"2022-08-06T01:49:47.773Z","comments":true,"path":"api/articles/寻找比目标字母大的最小字母.json","cover":null,"text":"744. 寻找比目标字母大的最小字母题目描述：给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。 在比较时，字母是依序循环出现的。举个例子： 如果目标字母 target &#x3...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"x的平方根","uid":"3b8822123bb08af7e60b15ed39819f81","slug":"x的平方根","date":"2022-08-04T01:36:47.000Z","updated":"2022-08-06T03:39:18.130Z","comments":true,"path":"api/articles/x的平方根.json","cover":null,"text":"69. x的平方根题目描述：给你一个非负整数 x ，计算并返回 x 的 算术平方根 。 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。 example 1: 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"划分字母区间","uid":"b3d8a41da3eeb7700876b944e097bd03","slug":"划分字母区间","date":"2022-08-03T02:16:17.000Z","updated":"2022-08-03T02:18:46.609Z","comments":true,"path":"api/articles/划分字母区间.json","cover":null,"text":"763.划分字母区间题目描述：763. 划分字母区间字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。 example 1: 输入：S &#x3D; &quot;ababcbacadefegd...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"最大子数组和","uid":"f6c56b941ed067956656bab8c3d0bb61","slug":"最大子数组和","date":"2022-08-02T01:22:15.000Z","updated":"2022-08-02T01:26:05.471Z","comments":true,"path":"api/articles/最大子数组和.json","cover":null,"text":"最大子数组和题目描述： 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部分。 example 1: 输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4] ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"非递减数列","uid":"ec406ffdb14348b593a8eaccf18d5ae3","slug":"非递减数列","date":"2022-08-01T02:10:59.000Z","updated":"2022-08-01T02:13:53.891Z","comments":true,"path":"api/articles/非递减数列.json","cover":null,"text":"非递减数列题目描述：665. 非递减数列难度中等681收藏分享切换为英文接收动态反馈 给你一个长度为 n 的整数数组 nums ，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。 我们是这样定义一个非递减数列的： 对于数组中任意的 i (0 &lt;= ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"判断子序列","uid":"82a606d2417be24205d07d3a23121174","slug":"判断子序列","date":"2022-07-31T03:01:34.000Z","updated":"2022-07-31T03:03:49.790Z","comments":true,"path":"api/articles/判断子序列.json","cover":null,"text":"392.判断子序列题目描述：给定字符串 s 和 t ，判断 s 是否为 t 的子序列。 字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。 example 1: 输...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"种花问题","uid":"17a5d31322fb6873ed3794c44302ea45","slug":"种花问题","date":"2022-07-30T01:41:20.000Z","updated":"2022-07-30T01:44:14.639Z","comments":true,"path":"api/articles/种花问题.json","cover":null,"text":"605.种花问题题目描述：假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。 给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"买卖股票的最佳时机2","uid":"6b879bd90cb55e176f69ea7d49b28d19","slug":"卖出股票的最佳时机2","date":"2022-07-29T02:18:33.000Z","updated":"2022-07-29T02:20:44.442Z","comments":true,"path":"api/articles/卖出股票的最佳时机2.json","cover":null,"text":"122. 买卖股票的最佳时机2题目描述：给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。 在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。 返回 你能获...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"买股票的最佳时机","uid":"5d7c6d0b72a0ac167a5663e12c3dcdf4","slug":"买股票的最佳时机","date":"2022-07-29T01:41:19.000Z","updated":"2022-07-29T01:45:17.659Z","comments":true,"path":"api/articles/买股票的最佳时机.json","cover":null,"text":"121. 买股票的最佳时机题目描述：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。 返回你可以从这笔...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":41,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":39,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"列表导出为数组","uid":"3961e8d57cd72a6f65bba4c20e028616","slug":"ListtoArray","date":"2022-07-28T03:18:32.000Z","updated":"2022-07-28T03:27:01.168Z","comments":true,"path":"api/articles/ListtoArray.json","cover":null,"text":"Java中List集合的toArray方法1. toArray() 当没有参数指定时，返回的数组中元素的类型是Object类型的。因为List在使用时一般会指定泛型，所以该方法是不常用的。 2.toArray(T[] a) leetcode-406使用到了该方法将列表对象转化为二...","link":"","photos":[],"count_time":{"symbolsCount":503,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":43,"path":"api/tags/Java.json"},{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}]}