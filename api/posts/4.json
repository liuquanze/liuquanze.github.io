{"total":75,"pageSize":12,"pageCount":7,"data":[{"title":"509.斐波那契数列","uid":"084b6d4a3eb1719c740e694cde17f8e9","slug":"斐波那契数列","date":"2022-08-13T03:54:49.000Z","updated":"2022-08-13T04:42:40.478Z","comments":true,"path":"api/articles/斐波那契数列.json","cover":null,"text":"509.斐波那契数列 斐波那契数 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) &#x3D; 0，F(1) &#x3D; 1 F(n) &#x3D; F(n - 1) +...","link":"","photos":[],"count_time":{"symbolsCount":967,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"1091.二进制矩阵中的最短路径","uid":"401c664502fc1c05444b73fd7436e5f7","slug":"1091-二进制矩阵中的最短路径","date":"2022-08-13T02:39:07.000Z","updated":"2022-08-13T02:45:44.716Z","comments":true,"path":"api/articles/1091-二进制矩阵中的最短路径.json","cover":null,"text":"1091.二进制矩阵中的最短路径题目描述： 二进制矩阵中的最短路径 难度中等214收藏分享切换为英文接收动态反馈 给你一个 n x n 的二进制矩阵 grid 中，返回矩阵中最短 畅通路径 的长度。如果不存在这样的路径，返回 -1 。 二进制矩阵中的 畅通路径 是一条从 左上角 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"不同的二叉搜索树Ⅱ","uid":"3a8637d28c1ed4973b1acb4bbd24e5f2","slug":"不同的二叉搜索树Ⅱ","date":"2022-08-12T02:59:34.000Z","updated":"2022-08-12T03:02:09.663Z","comments":true,"path":"api/articles/不同的二叉搜索树Ⅱ.json","cover":null,"text":"95.不同的二叉搜索树Ⅱ题目描述： 不同的二叉搜索树 II 给你一个整数 n ，请你生成并返回所有由 n 个节点组成且节点值从 1 到 n 互不相同的不同 二叉搜索树 。可以按 任意顺序 返回答案。 example 1: 输入：n &#x3D; 3 输出：[[1,null,2,n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"为运算表达式设计优先级","uid":"a2d24fc395bf8cf342e3b277c21f191b","slug":"为运算表达式设计优先级","date":"2022-08-12T02:29:37.000Z","updated":"2022-08-12T02:34:59.010Z","comments":true,"path":"api/articles/为运算表达式设计优先级.json","cover":null,"text":"241.为运算表达式设计优先级题目描述： 为运算表达式设计优先级 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。 生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找旋转排序数组中的最小值","uid":"8d8d1a0d9f17dbec885c291446cece5c","slug":"寻找旋转排序数组中的最小值","date":"2022-08-08T03:56:07.000Z","updated":"2022-08-08T03:59:15.533Z","comments":true,"path":"api/articles/寻找旋转排序数组中的最小值.json","cover":null,"text":"153.寻找旋转排序数组中的最小值题目描述：153. 寻找旋转排序数组中的最小值已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找峰值","uid":"d84518667e657cd3814bae0fb73c941b","slug":"寻找峰值","date":"2022-08-08T03:00:38.000Z","updated":"2022-08-08T03:03:05.770Z","comments":true,"path":"api/articles/寻找峰值.json","cover":null,"text":"162. 寻找峰值题目描述：162. 寻找峰值峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞ 。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"第一个错误版本","uid":"37fafcaad932621c324a857d69f2ce34","slug":"第一个错误版本","date":"2022-08-08T02:00:30.000Z","updated":"2022-08-08T02:10:52.932Z","comments":true,"path":"api/articles/第一个错误版本.json","cover":null,"text":"278.第一个错误版本题目描述：278. 第一个错误的版本你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"搜索旋转排序数组","uid":"ea76d2e3b8ba7df05f2a9007a5c4d57e","slug":"搜索旋转排序数组","date":"2022-08-07T02:54:15.000Z","updated":"2022-08-07T02:57:32.605Z","comments":true,"path":"api/articles/搜索旋转排序数组.json","cover":null,"text":"33. 搜索旋转排序数组题目描述：33. 搜索旋转排序数组整数数组 nums 按升序排列，数组中的值 互不相同 。 在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2022-08-07T02:30:53.375Z","updated":"2022-07-17T11:23:40.487Z","comments":true,"path":"api/articles/hello-world.json","cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"我的第一篇博客","uid":"03e1cda0baa3a649921c8af01fed4d68","slug":"demo01","date":"2022-08-07T02:30:53.353Z","updated":"2022-07-19T08:29:35.422Z","comments":true,"path":"api/articles/demo01.json","cover":null,"text":"第一篇博客哈哈，我有自己的博客啦！ ","link":"","photos":[],"count_time":{"symbolsCount":18,"symbolsTime":"1 mins."},"categories":[{"name":"个人","slug":"个人","count":1,"path":"api/categories/个人.json"}],"tags":[{"name":"记录","slug":"记录","count":1,"path":"api/tags/记录.json"},{"name":"日常","slug":"日常","count":1,"path":"api/tags/日常.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"有序数组的单一元素","uid":"5a834cb8bdd34deef00d023624eeeb11","slug":"有序数组的单一元素","date":"2022-08-06T02:23:53.000Z","updated":"2022-08-06T02:26:09.675Z","comments":true,"path":"api/articles/有序数组的单一元素.json","cover":null,"text":"540. 有序数组的单一元素题目描述： 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。 请你找出并返回只出现一次的那个数。 你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。 example 1： 输入: nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":62,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":65,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":61,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Pycharm模块不存在","uid":"bf9943093888157a40e49bab81aa424f","slug":"Pycharm模块不存在","date":"2022-08-05T02:33:06.000Z","updated":"2022-08-05T02:39:34.666Z","comments":true,"path":"api/articles/Pycharm模块不存在.json","cover":null,"text":"Pycharm模块不存在问题描述：当运行Python文件时，出现以下报错： python中已经用pip安装了某模块，但pycharm中为什么仍然显示没有该模块 出现原因：pycharm里面自带一个Python解释器，而这个里面是没有几个模块的。因为咱们在DOS命令行里面下载的模块...","link":"","photos":[],"count_time":{"symbolsCount":571,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"报错","slug":"报错","count":3,"path":"api/tags/报错.json"},{"name":"Pycharm","slug":"Pycharm","count":1,"path":"api/tags/Pycharm.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}]}