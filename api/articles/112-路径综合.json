{"title":"112.路径综合","uid":"03aa7645b6656a5f9f59ee379b9ad29c","slug":"112-路径综合","date":"2022-10-01T15:19:03.000Z","updated":"2022-10-01T15:24:17.548Z","comments":true,"path":"api/articles/112-路径综合.json","keywords":null,"cover":null,"content":"<h1 id=\"112-路径综合\"><a href=\"#112-路径综合\" class=\"headerlink\" title=\"112.路径综合\"></a>112.路径综合</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"112\">\n<li>路径总和</li>\n</ol>\n<p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum &#x3D; 22\n输出：true\n解释：等于目标和的根节点到叶节点路径如上图所示。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [1,2,3], targetSum &#x3D; 5\n输出：false\n解释：树中存在两条根节点到叶子节点的路径：\n(1 --&gt; 2): 和为 3\n(1 --&gt; 3): 和为 4\n不存在 sum &#x3D; 5 的根节点到叶子节点的路径。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [], targetSum &#x3D; 0\n输出：false\n解释：由于树是空的，所以不存在根节点到叶子节点的路径。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/path-sum\">https://leetcode.cn/problems/path-sum</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    &#x2F;&#x2F;递归，传入三个参数，第一个是当前节点，一个是从根节点到当前节点的父节点路径上的val之和，targetNum是目标路径上的节点val之和\n    public boolean traverse(TreeNode node,int count,int targetSum)&#123;\n        &#x2F;&#x2F;加上当前节点的val，表示根节点到当前节点这条路径上的所有节点的val之和\n        count+&#x3D;node.val;\n        &#x2F;&#x2F;如果当前节点是叶子节点，则判断当前路径节点的val之和是否等于目标路径的节点val之和，如果等于，则返回true，否则返回false\n        if(node.left&#x3D;&#x3D;null&amp;&amp;node.right&#x3D;&#x3D;null)&#123;\n            if(count&#x3D;&#x3D;targetSum)&#123;\n                return true;\n            &#125;else&#123;\n                return false;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;如果当前节点不是叶子节点，则分别判断左右子树中是否存在目标路径，下面两个变量分别存储左右子树是否存在目标路径\n        boolean left&#x3D;false;\n        boolean right&#x3D;false;\n        &#x2F;&#x2F;若左子树非空，则对左子树进行递归\n        if(node.left!&#x3D;null)&#123;\n            left&#x3D;traverse(node.left,count,targetSum);\n        &#125;\n        &#x2F;&#x2F;对右子树进行递归\n        if(node.right!&#x3D;null)&#123;\n            right&#x3D;traverse(node.right,count,targetSum);\n        &#125;\n        &#x2F;&#x2F;当左子树或者右子树中存在一条目标路径则表示该树存在目标路径，这里使用||\n        return left||right;\n\n    &#125;\n\n    public boolean hasPathSum(TreeNode root, int targetSum) &#123;\n        if(root&#x3D;&#x3D;null)\n            return false;\n        return traverse(root,0,targetSum);\n    &#125;\n&#125;</code></pre>\n\n","text":"112.路径综合题目描述： 路径总和 给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。 叶子节...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#112-%E8%B7%AF%E5%BE%84%E7%BB%BC%E5%90%88\"><span class=\"toc-text\">112.路径综合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"105. 从前序与中序遍历序列构造二叉树","uid":"26c4b1d62f73766a69fff244a3f35602","slug":"105-从前序与中序遍历序列构造二叉树","date":"2022-10-03T12:52:58.000Z","updated":"2022-10-03T13:28:17.504Z","comments":true,"path":"api/articles/105-从前序与中序遍历序列构造二叉树.json","keywords":null,"cover":null,"text":"105.从前序与中序遍历序列构造二叉树题目描述： 从前序与中序遍历序列构造二叉树 给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。 example 1: 输入...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"513.找树左下角的值","uid":"806f699ee80a6615fc5f8fc6dcffa078","slug":"513-找树左下角的值","date":"2022-09-30T15:03:56.000Z","updated":"2022-09-30T15:05:53.916Z","comments":true,"path":"api/articles/513-找树左下角的值.json","keywords":null,"cover":null,"text":"513.找树左下角的值题目描述： 找树左下角的值 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 example 1： 输入: root &#x3D; [2,1,3] 输出: 1 example 2: 输入: [1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}