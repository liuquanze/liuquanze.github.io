{"title":"根据身高重建队列","uid":"17c36b5674ca98b6f74033f762d79de8","slug":"根据身高重建队列","date":"2022-07-28T03:13:52.000Z","updated":"2022-07-28T03:16:54.318Z","comments":true,"path":"api/articles/根据身高重建队列.json","keywords":null,"cover":null,"content":"<h1 id=\"406-根据身高重建队列\"><a href=\"#406-根据身高重建队列\" class=\"headerlink\" title=\"406.根据身高重建队列\"></a>406.根据身高重建队列</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><p>假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] &#x3D; [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p>\n<p>请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] &#x3D; [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：people &#x3D; [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n解释：\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</code></pre>\n\n\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：people &#x3D; [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</code></pre>\n\n\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/queue-reconstruction-by-height/\">https://leetcode.cn/problems/queue-reconstruction-by-height/</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int[][] reconstructQueue(int[][] people) &#123;\n        &#x2F;*\n        第一个元素进行降序排序，即元素越小，排的越靠后，\n        对于第一个元素相同的数组，针对第二个元素进行升序排序，即越小越靠前，之所以这样排序，是因为，最后是按照第二个元素\n        进行插入的，也就是说，被插入的时间比较早的元素比较容易被挤到后面，也是因为这个原因，第一个元素是降序，越小的插入的时间越迟，越大的越有可能后移，这样是不会出错的。\n        同理第二个元素，越大的越靠后，因为后面元素的插入不会影响前面的元素，而前面元素的插入是会影响后面的，所以先插小，后插大\n\n         *&#x2F;\n         &#x2F;&#x2F;对第一个元素进行降序排序，在第一个元素相同时对第二个元素进行降序\n        Arrays.sort(people,(m,n)-&gt;&#123;\n            &#x2F;&#x2F;第一个元素不相等时，使用降序\n            if(m[0]!&#x3D;n[0])&#123;\n                return n[0]-m[0];\n                &#x2F;&#x2F;第一个元素相等时，使用升序\n            &#125;else&#123;\n                return m[1]-n[1];\n            &#125;\n        &#125;);\n        &#x2F;&#x2F;创建返回值\n        List&lt;int[]&gt; list&#x3D;new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;将排序后的数组插入到返回值中\n        for(int[] person:people)&#123;\n            &#x2F;&#x2F;若返回值列表大小大于要插入位置，则直接插入\n            if(list.size()&gt; person[1])&#123;\n                list.add(person[1],person);\n            &#125;else&#123;      &#x2F;&#x2F;若返回值列表大小小于要插入位置，则将person插入列表末尾位置\n                list.add(list.size(),person);\n            &#125;\n        &#125;\n        &#x2F;&#x2F;将列表转化为二维数组进行返回\n        return list.toArray(new int[list.size()][]);\n\n    &#125;\n&#125;</code></pre>\n\n","text":"406.根据身高重建队列题目描述：假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] &#x3D; [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。 请你...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":68,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":71,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":67,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97\"><span class=\"toc-text\">406.根据身高重建队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"列表导出为数组","uid":"3961e8d57cd72a6f65bba4c20e028616","slug":"ListtoArray","date":"2022-07-28T03:18:32.000Z","updated":"2022-07-28T03:27:01.168Z","comments":true,"path":"api/articles/ListtoArray.json","keywords":null,"cover":null,"text":"Java中List集合的toArray方法1. toArray() 当没有参数指定时，返回的数组中元素的类型是Object类型的。因为List在使用时一般会指定泛型，所以该方法是不常用的。 2.toArray(T[] a) leetcode-406使用到了该方法将列表对象转化为二...","link":"","photos":[],"count_time":{"symbolsCount":503,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":71,"path":"api/tags/Java.json"},{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"452.Minimum Number of Arrows to Burst Balloons","uid":"8c8ee24da1a163a01cda5376a75169b1","slug":"MinimumNumberofArrowstoBurstBalloons","date":"2022-07-27T02:11:15.000Z","updated":"2022-07-27T02:15:51.625Z","comments":true,"path":"api/articles/MinimumNumberofArrowstoBurstBalloons.json","keywords":null,"cover":null,"text":"452.Minimum Number of Arrows to Burst Balloons题目描述：There are some spherical balloons taped onto a flat wall that represents the XY-plane. Th...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":68,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":71,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":67,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}