{"title":"236.二叉搜索树的最近公共祖先","uid":"2f59e63c36776555eba1dd17097990fc","slug":"236-二叉搜索树的最近公共祖先","date":"2022-10-11T03:12:26.000Z","updated":"2022-10-11T03:14:52.266Z","comments":true,"path":"api/articles/236-二叉搜索树的最近公共祖先.json","keywords":null,"cover":null,"content":"<h1 id=\"236-二叉搜索树的最近公共祖先\"><a href=\"#236-二叉搜索树的最近公共祖先\" class=\"headerlink\" title=\"236.二叉搜索树的最近公共祖先\"></a>236.二叉搜索树的最近公共祖先</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"235\">\n<li>二叉搜索树的最近公共祖先</li>\n</ol>\n<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉搜索树: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree\">https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val &#x3D; x; &#125;\n * &#125;\n *&#x2F;\n\nclass Solution &#123;\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;\n        return findNode(root,p,q);\n    &#125;\n    &#x2F;&#x2F;因为是二叉搜索树，所以和普通二叉树的递归有所不同，之后还需要对比看，还没理解透\n    public TreeNode findNode(TreeNode root,TreeNode p,TreeNode q)&#123;\n        if(root&#x3D;&#x3D;null)\n            return null;\n        &#x2F;&#x2F;若该节点值大于pq，搜索左边，\n        if(root.val&gt;p.val&amp;&amp;root.val&gt;q.val)&#123;\n            TreeNode left&#x3D;lowestCommonAncestor(root.left,p,q);\n            if(left!&#x3D;null)&#123;\n                return left;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;若该节点值小于pq，则搜索右边\n        if(root.val&lt;p.val&amp;&amp;root.val&lt;q.val)&#123;\n            TreeNode right&#x3D;lowestCommonAncestor(root.right,p,q);\n            if(right!&#x3D;null)&#123;\n                return right;\n            &#125;\n        &#125;\n        return root;\n    &#125;\n    \n&#125;</code></pre>\n\n\n\n","text":"236.二叉搜索树的最近公共祖先题目描述： 二叉搜索树的最近公共祖先 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":96,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":100,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":95,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#236-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88\"><span class=\"toc-text\">236.二叉搜索树的最近公共祖先</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"701.二叉搜索树中的插入操作","uid":"de679446ce90a96213f1c24b7dcd05cc","slug":"701-二叉搜索树中的插入操作","date":"2022-10-12T02:51:28.000Z","updated":"2022-10-12T02:55:13.376Z","comments":true,"path":"api/articles/701-二叉搜索树中的插入操作.json","keywords":null,"cover":null,"text":"701.二叉搜索树中的插入操作题目描述： 二叉搜索树中的插入操作 给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。 注意，可能存在多种有效...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":96,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":100,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":95,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"236.二叉树的最近公共祖先","uid":"601c51b501c0367e52192a7f2085d7dc","slug":"236-二叉树的最近公共祖先","date":"2022-10-10T08:16:57.000Z","updated":"2022-10-10T08:19:39.138Z","comments":true,"path":"api/articles/236-二叉树的最近公共祖先.json","keywords":null,"cover":null,"text":"236.二叉树的最近公共祖先题目描述： 二叉树的最近公共祖先 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":96,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":100,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":95,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}