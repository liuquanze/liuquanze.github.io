{"title":"513.找树左下角的值","uid":"806f699ee80a6615fc5f8fc6dcffa078","slug":"513-找树左下角的值","date":"2022-09-30T15:03:56.000Z","updated":"2022-09-30T15:05:53.916Z","comments":true,"path":"api/articles/513-找树左下角的值.json","keywords":null,"cover":null,"content":"<h1 id=\"513-找树左下角的值\"><a href=\"#513-找树左下角的值\" class=\"headerlink\" title=\"513.找树左下角的值\"></a>513.找树左下角的值</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"513\">\n<li>找树左下角的值</li>\n</ol>\n<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p>\n<p>假设二叉树中至少有一个节点。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: root &#x3D; [2,1,3]\n输出: 1</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: [1,2,3,4,null,5,6,null,null,7]\n输出: 7</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>二叉树的节点个数的范围是 <code>[1,104]</code></li>\n<li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/find-bottom-left-tree-value/\">https://leetcode.cn/problems/find-bottom-left-tree-value/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public int findBottomLeftValue(TreeNode root) &#123;\n        if(root.left&#x3D;&#x3D;null&amp;&amp;root.right&#x3D;&#x3D;null)&#123;\n            return root.val;\n        &#125;\n        int[] deepest&#x3D;new int[2];\n        \n        deepest[0]&#x3D;0;\n        deepest[1]&#x3D;0;\n        findAllLeftLeaf(root,deepest,1);\n        return deepest[1];\n    &#125;\n    public void findAllLeftLeaf(TreeNode root,int[] deepest,int depth)&#123;\n        if(root&#x3D;&#x3D;null)\n            return ;\n        if(root.left&#x3D;&#x3D;null&amp;&amp;root.right&#x3D;&#x3D;null)\n            return ;\n        if(root.left!&#x3D;null&amp;&amp;root.left.left&#x3D;&#x3D;null&amp;&amp;root.left.right&#x3D;&#x3D;null)&#123;\n            &#x2F;&#x2F;若深度更深\n            if(depth+1&gt;deepest[0])&#123;\n                deepest[0]&#x3D;depth+1;\n                deepest[1]&#x3D;root.left.val;\n            &#125;\n        &#125;\n        findAllLeftLeaf(root.left,deepest,depth+1);\n        findAllLeftLeaf(root.right,deepest,depth+1);\n\n            \n    &#125;\n&#125;</code></pre>\n\n","text":"513.找树左下角的值题目描述： 找树左下角的值 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 example 1： 输入: root &#x3D; [2,1,3] 输出: 1 example 2: 输入: [1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":81,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":84,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":80,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":20,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">513.找树左下角的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"112.路径综合","uid":"03aa7645b6656a5f9f59ee379b9ad29c","slug":"112-路径综合","date":"2022-10-01T15:19:03.000Z","updated":"2022-10-01T15:24:17.548Z","comments":true,"path":"api/articles/112-路径综合.json","keywords":null,"cover":null,"text":"112.路径综合题目描述： 路径总和 给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。 叶子节...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":81,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":84,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":80,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":20,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"404.左叶子之和","uid":"4d298bda0eb98905fab53c1b930a261c","slug":"404-左叶子之和","date":"2022-09-30T14:44:06.000Z","updated":"2022-09-30T14:46:08.856Z","comments":true,"path":"api/articles/404-左叶子之和.json","keywords":null,"cover":null,"text":"404.左叶子之和题目描述： 左叶子之和 给定二叉树的根节点 root ，返回所有左叶子之和。 example 1： 输入: root &#x3D; [3,9,20,null,null,15,7] 输出: 24 解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":81,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":84,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":80,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":20,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}