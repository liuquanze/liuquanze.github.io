{"title":"15.三数之和","uid":"6402807c619d1044cedb6c34299402ec","slug":"15-三数之和","date":"2022-08-31T01:40:26.000Z","updated":"2022-08-31T01:42:55.797Z","comments":true,"path":"api/articles/15-三数之和.json","keywords":null,"cover":null,"content":"<h1 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15.三数之和\"></a>15.三数之和</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"15\">\n<li>三数之和</li>\n</ol>\n<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>\n<p>你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] &#x3D; (-1) + 0 + 1 &#x3D; 0 。\nnums[1] + nums[2] + nums[4] &#x3D; 0 + 1 + (-1) &#x3D; 0 。\nnums[0] + nums[3] + nums[4] &#x3D; (-1) + 2 + (-1) &#x3D; 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [0,1,1]\n输出：[]\n解释：唯一可能的三元组和不为 0 。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [0,0,0]\n输出：[[0,0,0]]\n解释：唯一可能的三元组和为 0 。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/3sum\">https://leetcode.cn/problems/3sum</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123;\n        List&lt;List&lt;Integer&gt;&gt; result &#x3D; new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;对数组进行排序\n        Arrays.sort(nums);\n\n        \n        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;\n            &#x2F;&#x2F;因为已经排序了，如果第i个元素大于0，则之后的元素均大于0， 不能满足和为0，直接退出\n            if (nums[i] &gt; 0) &#123;\n                return result;\n            &#125;\n\n            &#x2F;&#x2F;去重，如果i和i-1的元素相同，则遍历下一个\n            if (i &gt; 0 &amp;&amp; nums[i] &#x3D;&#x3D; nums[i - 1]) &#123;\n                continue;\n            &#125;\n\n            &#x2F;&#x2F;left初始指向i+1，right指向数组末尾\n            int left &#x3D; i + 1;\n            int right &#x3D; nums.length - 1;\n            &#x2F;&#x2F;寻找满足条件的三个数\n            while (right &gt; left) &#123;\n                &#x2F;&#x2F;获取三个指针指向的值\n                int sum &#x3D; nums[i] + nums[left] + nums[right];\n                &#x2F;&#x2F;如果sum大于0，表示和太大，right指针左移，将和减小\n                if (sum &gt; 0) &#123;\n                    right--;\n                    &#x2F;&#x2F;若sum小于0，则表示太小，left右移，扩大sum\n                &#125; else if (sum &lt; 0) &#123;\n                    left++;\n                    &#x2F;&#x2F;当sum&#x3D;&#x3D;0，则表示满足条件\n                &#125; else &#123;\n                    &#x2F;&#x2F;将该组合加入结果集合\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    &#x2F;&#x2F;寻找下一组满足条件的和，但是需要去重\n                    while (right &gt; left &amp;&amp; nums[right] &#x3D;&#x3D; nums[right - 1]) right--;\n                    while (right &gt; left &amp;&amp; nums[left] &#x3D;&#x3D; nums[left + 1]) left++;\n                    \n                    right--; \n                    left++;\n                &#125;\n            &#125;\n        &#125;\n        return result;\n    &#125;\n&#125;</code></pre>\n\n","text":"15.三数之和题目描述： 三数之和 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">15.三数之和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"344.反转字符串","uid":"db3930f2bf194d71c39748bb27ba1de2","slug":"344-反转字符串","date":"2022-09-02T13:55:52.000Z","updated":"2022-09-02T13:57:51.486Z","comments":true,"path":"api/articles/344-反转字符串.json","keywords":null,"cover":null,"text":"344.反转字符串题目描述： 反转字符串 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。 不要给另外的数组分配额外的空间，你必须**原地修改输入数组**、使用 O(1) 的额外空间解决这一问题。 example 1: 输入：s &#x3D; ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"454.四数相加Ⅱ","uid":"d39f1cd0e2f648b0b919de3afe262477","slug":"454-四数相加Ⅱ","date":"2022-08-31T01:01:44.000Z","updated":"2022-08-31T01:07:26.665Z","comments":true,"path":"api/articles/454-四数相加Ⅱ.json","keywords":null,"cover":null,"text":"454.四数相加Ⅱ题目描述： 四数相加 II 给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足： 0 &lt;= i, j, k, l &lt; n nums1[i] + nums2...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}