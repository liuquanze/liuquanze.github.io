{"title":"1047.删除字符串中所有相邻重复项","uid":"1e9d09714216aecd266bb235c84e915f","slug":"1047-删除字符串中所有相邻重复项","date":"2022-09-16T15:21:54.000Z","updated":"2022-09-16T15:23:59.161Z","comments":true,"path":"api/articles/1047-删除字符串中所有相邻重复项.json","keywords":null,"cover":null,"content":"<h1 id=\"1047-删除字符串中所有相邻重复项\"><a href=\"#1047-删除字符串中所有相邻重复项\" class=\"headerlink\" title=\"1047.删除字符串中所有相邻重复项\"></a>1047.删除字符串中所有相邻重复项</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"1047\">\n<li>删除字符串中的所有相邻重复项</li>\n</ol>\n<p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>\n<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>\n<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：&quot;abbaca&quot;\n输出：&quot;ca&quot;\n解释：\n例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</code></pre>\n\n<p>提示：</p>\n<ol>\n<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n<li><code>S</code> 仅由小写英文字母组成。</li>\n</ol>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string\">https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public String removeDuplicates(String S) &#123;\n        &#x2F;&#x2F;创建deque\n        ArrayDeque&lt;Character&gt; deque &#x3D; new ArrayDeque&lt;&gt;();\n        char ch;\n        &#x2F;&#x2F;遍历字符串，检查栈顶元素是否与当前遍历元素相同，如果相同，则栈顶元素出栈，否则当前遍历元素入栈。，若栈为空，则直接入栈\n        for (int i &#x3D; 0; i &lt; S.length(); i++) &#123;\n            ch &#x3D; S.charAt(i);\n            if (deque.isEmpty() || deque.peek() !&#x3D; ch) &#123;\n                deque.push(ch);\n            &#125; else &#123;\n                deque.pop();\n            &#125;\n        &#125;\n        String str &#x3D; &quot;&quot;;\n        &#x2F;&#x2F;剩余的元素即为不重复的元素，注意这里是出栈元素拼接str，不要搞反，因为出栈的字符是逆序的\n        while (!deque.isEmpty()) &#123;\n            str &#x3D; deque.pop() + str;\n        &#125;\n        return str;\n\n    &#125;\n&#125;</code></pre>\n\n","text":"1047.删除字符串中所有相邻重复项题目描述： 删除字符串中的所有相邻重复项 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。 在 S 上反复执行重复项删除操作，直到无法继续删除。 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9\"><span class=\"toc-text\">1047.删除字符串中所有相邻重复项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"150. 逆波兰表达式求值","uid":"b64a14a9b898433644724b2c4c472c30","slug":"150-逆波兰表达式求值","date":"2022-09-17T00:27:04.000Z","updated":"2022-09-17T00:29:56.625Z","comments":true,"path":"api/articles/150-逆波兰表达式求值.json","keywords":null,"cover":null,"text":"150.逆波兰表达式求值题目描述： 逆波兰表达式求值 根据 逆波兰表示法，求表达式的值。 有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 注意 两个整数之间的除法只保留整数部分。 可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"20.有效的括号","uid":"965581e4ba331d2a60f395aea86a2168","slug":"20-有效的括号","date":"2022-09-15T15:43:52.000Z","updated":"2022-09-15T15:46:45.717Z","comments":true,"path":"api/articles/20-有效的括号.json","keywords":null,"cover":null,"text":"20.有效的括号题目描述： 有效的括号 给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}