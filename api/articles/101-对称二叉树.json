{"title":"101.对称二叉树","uid":"0db04708e016f3790cc78724de1cd91e","slug":"101-对称二叉树","date":"2022-09-23T13:05:24.000Z","updated":"2022-09-23T13:09:25.288Z","comments":true,"path":"api/articles/101-对称二叉树.json","keywords":null,"cover":null,"content":"<h1 id=\"101-对称二叉树\"><a href=\"#101-对称二叉树\" class=\"headerlink\" title=\"101.对称二叉树\"></a>101.对称二叉树</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\t\t1\n      |    |\n      2    2\n    |   |  |   |\n    3   4   4   3\n输入：root &#x3D; [1,2,2,3,4,4,3]\n输出：true</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\t\t1\n      |    |\n      2    2\n        |      |\n        3       3\n输入：root &#x3D; [1,2,2,null,3,null,3]\n输出：false</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点数目在范围 <code>[1, 1000]</code> 内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/symmetric-tree/\">https://leetcode.cn/problems/symmetric-tree/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public boolean isSymmetric(TreeNode root) &#123;\n        return check(root.left,root.right);\n    &#125;\n    public boolean check(TreeNode left,TreeNode right)&#123;\n        &#x2F;&#x2F;当一个空，一个不空，则不对称\n        if(left&#x3D;&#x3D;null&amp;&amp;right!&#x3D;null)\n            return false;\n        if(left!&#x3D;null&amp;&amp;right&#x3D;&#x3D;null)\n            return false;\n        &#x2F;&#x2F;若两个都为空，则对称\n        if(left&#x3D;&#x3D;null&amp;&amp;right&#x3D;&#x3D;null)\n            return true;\n        &#x2F;&#x2F;若两个值不一致，则不对称\n        if(left.val!&#x3D;right.val)\n            return false;\n        &#x2F;&#x2F;若两个值一致，继续判断下一层节点是否对称\n        boolean left_check&#x3D;check(left.left,right.right);\n        boolean right_check&#x3D;check(left.right,right.left);\n        &#x2F;&#x2F;仅当下层所有的节点都对称时，才对称，否则都不对称\n        return left_check&amp;&amp;right_check;\n    &#125;\n&#125;</code></pre>\n\n\n\n","text":"101.对称二叉树题目描述：example 1： 1 | | 2 2 | | | | 3 4 4 3 输入：root &#x3D; [1,2,2,3,4,4,3] 输出：true example 2: 1 | | 2 2 | | 3 3 输入：root &#x3D; [1,2,2...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":72,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":75,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":71,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":11,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">101.对称二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"111.二叉树的最小深度","uid":"5e70057312954f6211ec72bb65eb479c","slug":"111-二叉树的最小深度","date":"2022-09-24T14:45:07.000Z","updated":"2022-09-24T14:55:20.004Z","comments":true,"path":"api/articles/111-二叉树的最小深度.json","keywords":null,"cover":null,"text":"111.二叉树的最小深度问题描述： 二叉树的最小深度 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的节点。 example 1: 输入：root &#x3D; [3,9,20,null,null,15,7...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":72,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":75,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":71,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":11,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"226.翻转二叉树","uid":"ef0dd3ab7debf38b3a6c2ed67270d73b","slug":"226-翻转二叉树","date":"2022-09-22T14:25:52.000Z","updated":"2022-09-22T14:31:11.456Z","comments":true,"path":"api/articles/226-翻转二叉树.json","keywords":null,"cover":null,"text":"226. 翻转二叉树题目描述：example 1: 4 | | 2 7 | | | | 1 3 6 9 4 | | 7 2 | | | | 9 6 3 1 输入：root &#x3D; [4,2,7,1,3,6,9] 输出：[4,7,2,9,6,3,1] example 2: 2...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":72,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":75,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":71,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":11,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}