{"title":"寻找旋转排序数组中的最小值","uid":"8d8d1a0d9f17dbec885c291446cece5c","slug":"寻找旋转排序数组中的最小值","date":"2022-08-08T03:56:07.000Z","updated":"2022-08-08T03:59:15.533Z","comments":true,"path":"api/articles/寻找旋转排序数组中的最小值.json","keywords":null,"cover":null,"content":"<h1 id=\"153-寻找旋转排序数组中的最小值\"><a href=\"#153-寻找旋转排序数组中的最小值\" class=\"headerlink\" title=\"153.寻找旋转排序数组中的最小值\"></a>153.寻找旋转排序数组中的最小值</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><h4 id=\"153-寻找旋转排序数组中的最小值-1\"><a href=\"#153-寻找旋转排序数组中的最小值-1\" class=\"headerlink\" title=\"153. 寻找旋转排序数组中的最小值\"></a>153. 寻找旋转排序数组中的最小值</h4><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p>\n<ul>\n<li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li>\n<li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li>\n</ul>\n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p>\n<p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p>\n<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</code></pre>\n\n<p>example 2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</code></pre>\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/\">https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int findMin(int[] nums) &#123;\n        int left&#x3D;0;\n        int right&#x3D;nums.length-1;\n        int ret&#x3D;0;\n        while(left&lt;right)&#123;\n            int mid&#x3D;(right-left)&#x2F;2+left;\n            &#x2F;&#x2F;在访问时需要访问mid以及右边的元素，所以至少访问两个元素，left&lt;right为循环结束的条件\n            if(nums[mid]&gt;nums[right])&#123;\n                left&#x3D;mid+1;\n            &#125;else&#123;\n                right&#x3D;mid;\n            &#125;\n        &#125;\n        return nums[right];\n    &#125;\n&#125;</code></pre>\n\n","text":"153.寻找旋转排序数组中的最小值题目描述：153. 寻找旋转排序数组中的最小值已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":64,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":67,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":63,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC\"><span class=\"toc-text\">153.寻找旋转排序数组中的最小值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-1\"><span class=\"toc-text\">153. 寻找旋转排序数组中的最小值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"为运算表达式设计优先级","uid":"a2d24fc395bf8cf342e3b277c21f191b","slug":"为运算表达式设计优先级","date":"2022-08-12T02:29:37.000Z","updated":"2022-08-12T02:34:59.010Z","comments":true,"path":"api/articles/为运算表达式设计优先级.json","keywords":null,"cover":null,"text":"241.为运算表达式设计优先级题目描述： 为运算表达式设计优先级 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。 生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":64,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":67,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":63,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"寻找峰值","uid":"d84518667e657cd3814bae0fb73c941b","slug":"寻找峰值","date":"2022-08-08T03:00:38.000Z","updated":"2022-08-08T03:03:05.770Z","comments":true,"path":"api/articles/寻找峰值.json","keywords":null,"cover":null,"text":"162. 寻找峰值题目描述：162. 寻找峰值峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞ 。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":64,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":67,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":63,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}