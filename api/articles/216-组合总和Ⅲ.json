{"title":"216.组合总和Ⅲ","uid":"16a3361e9df66c3302f57a7e8e439d54","slug":"216-组合总和Ⅲ","date":"2022-10-27T15:01:56.000Z","updated":"2022-10-27T15:04:35.192Z","comments":true,"path":"api/articles/216-组合总和Ⅲ.json","keywords":null,"cover":null,"content":"<h1 id=\"216-组合总和Ⅲ\"><a href=\"#216-组合总和Ⅲ\" class=\"headerlink\" title=\"216.组合总和Ⅲ\"></a>216.组合总和Ⅲ</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"216\">\n<li>组合总和 III</li>\n</ol>\n<p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p>\n<ul>\n<li>只使用数字1到9</li>\n<li>每个数字 <strong>最多使用一次</strong></li>\n</ul>\n<p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: k &#x3D; 3, n &#x3D; 7\n输出: [[1,2,4]]\n解释:\n1 + 2 + 4 &#x3D; 7\n没有其他符合的组合了。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: k &#x3D; 3, n &#x3D; 9\n输出: [[1,2,6], [1,3,5], [2,3,4]]\n解释:\n1 + 2 + 6 &#x3D; 9\n1 + 3 + 5 &#x3D; 9\n2 + 3 + 4 &#x3D; 9\n没有其他符合的组合了。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: k &#x3D; 4, n &#x3D; 1\n输出: []\n解释: 不存在有效的组合。\n在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 &#x3D; 10，因为10 &gt; 1，没有有效的组合。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>2 &lt;= k &lt;= 9</code></li>\n<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/combination-sum-iii/description/\">https://leetcode.cn/problems/combination-sum-iii/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    List&lt;List&lt;Integer&gt;&gt; result&#x3D;new ArrayList&lt;&gt;();\n    LinkedList&lt;Integer&gt; path&#x3D;new LinkedList&lt;&gt;();\n    int sum&#x3D;0;\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123;\n        getPathes(k,n,1);\n        return result;\n    &#125;\n\n    public void getPathes(int k,int n,int index)&#123;\n        &#x2F;&#x2F;若当前的元素之和已经超过了目标sum，则直接跳出本次递归，就是剪枝操作\n        if(sum&gt;n)&#123;\n            return;\n        &#125;\n        if(path.size()&#x3D;&#x3D;k)&#123;\n            if(sum&#x3D;&#x3D;n)&#123;\n                result.add(new ArrayList(path));\n            &#125;\n            return;\n        &#125;\n\n        &#x2F;&#x2F;遍历该层所有可能的元素情况\n        for(int i&#x3D;index;i&lt;&#x3D;9-(k-path.size())+1;i++)&#123;\n            &#x2F;&#x2F;该层元素进入path，更新sum\n            sum+&#x3D;i;\n            path.add(i);\n            &#x2F;&#x2F;对下层进行递归，判断下一个元素\n            getPathes(k,n,i+1);\n            &#x2F;&#x2F;回溯操作，弹出当前元素，并恢复sum值\n            sum-&#x3D;i;\n            path.removeLast();\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n","text":"216.组合总和Ⅲ题目描述： 组合总和 III 找出所有相加之和为 n 的 k 个数的组合，且满足下列条件： 只使用数字1到9 每个数字 最多使用一次 返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。 example 1: 输入: k &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":119,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":113,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A2\"><span class=\"toc-text\">216.组合总和Ⅲ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"17.电话号码的字母组合","uid":"bd4de893333ca60e13361c93f6d4898d","slug":"17-电话号码的字母组合","date":"2022-10-28T15:38:55.000Z","updated":"2022-10-28T15:43:41.191Z","comments":true,"path":"api/articles/17-电话号码的字母组合.json","keywords":null,"cover":null,"text":"17.电话号码的字母组合题目描述： 电话号码的字母组合 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 example 1： 输入：digits &#x3D; ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":119,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":113,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"77.组合","uid":"1b150da79eed14110a1dc1998320aec7","slug":"77-组合","date":"2022-10-24T15:30:39.000Z","updated":"2022-10-24T15:32:53.207Z","comments":true,"path":"api/articles/77-组合.json","keywords":null,"cover":null,"text":"77.组合题目描述： 组合 给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。 你可以按 任何顺序 返回答案。 example 1： 输入：n &#x3D; 4, k &#x3D; 2 输出： [ [2,4], [3,4], [2,3], [1,2]...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":119,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":113,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}