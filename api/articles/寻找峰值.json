{"title":"寻找峰值","uid":"d84518667e657cd3814bae0fb73c941b","slug":"寻找峰值","date":"2022-08-08T03:00:38.000Z","updated":"2022-08-08T03:03:05.770Z","comments":true,"path":"api/articles/寻找峰值.json","keywords":null,"cover":null,"content":"<h2 id=\"162-寻找峰值\"><a href=\"#162-寻找峰值\" class=\"headerlink\" title=\"162. 寻找峰值\"></a>162. 寻找峰值</h2><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><h4 id=\"162-寻找峰值-1\"><a href=\"#162-寻找峰值-1\" class=\"headerlink\" title=\"162. 寻找峰值\"></a>162. 寻找峰值</h4><p>峰值元素是指其值严格大于左右相邻值的元素。</p>\n<p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p>\n<p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p>\n<p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [1,2,3,1]\n输出：2\n解释：3 是峰值元素，你的函数应该返回其索引 2。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [1,2,1,3,5,6,4]\n输出：1 或 5 \n解释：你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。</code></pre>\n\n\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/find-peak-element/\">https://leetcode.cn/problems/find-peak-element/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int findPeakElement(int[] nums) &#123;\n        if(nums.length&#x3D;&#x3D;1)&#123;\n            return 0;\n        &#125;\n        int left&#x3D;0;\n        int right&#x3D;nums.length-1;\n        int ret&#x3D;0;\n        &#x2F;&#x2F;这里使用的是左开右闭区间，不可使用左闭右闭区间，因为在进行查找时需要和右边的元素进行比较，所以必须保证，搜索区间包含至少两个元素，因此left&lt;&#x3D;right时，是不满足条件的，当left&#x3D;&#x3D;right进行判断时，会发生数组越界异常，因此该题只可以使用左闭右开区间。\n        while(right&gt;left)&#123;\n            int mid&#x3D;(right-left)&#x2F;2+left;\n            if(nums[mid]&gt;nums[mid+1])&#123;\n\n                right&#x3D;mid;\n            &#125;else&#123;\n                left&#x3D;mid+1;\n            &#125;\n        &#125;\n        return right;\n    &#125;\n&#125;</code></pre>\n\n","text":"162. 寻找峰值题目描述：162. 寻找峰值峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞ 。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":45,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":47,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":43,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC\"><span class=\"toc-text\">162. 寻找峰值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC-1\"><span class=\"toc-text\">162. 寻找峰值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"寻找旋转排序数组中的最小值","uid":"8d8d1a0d9f17dbec885c291446cece5c","slug":"寻找旋转排序数组中的最小值","date":"2022-08-08T03:56:07.000Z","updated":"2022-08-08T03:59:15.533Z","comments":true,"path":"api/articles/寻找旋转排序数组中的最小值.json","keywords":null,"cover":null,"text":"153.寻找旋转排序数组中的最小值题目描述：153. 寻找旋转排序数组中的最小值已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":45,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":47,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":43,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"第一个错误版本","uid":"37fafcaad932621c324a857d69f2ce34","slug":"第一个错误版本","date":"2022-08-08T02:00:30.000Z","updated":"2022-08-08T02:10:52.932Z","comments":true,"path":"api/articles/第一个错误版本.json","keywords":null,"cover":null,"text":"278.第一个错误版本题目描述：278. 第一个错误的版本你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":45,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":47,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":43,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}