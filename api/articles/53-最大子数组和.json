{"title":"53.最大子数组和","uid":"616c86b7fd44020d5709f34410a56e33","slug":"53-最大子数组和","date":"2022-12-03T14:21:26.000Z","updated":"2022-12-03T14:24:22.249Z","comments":true,"path":"api/articles/53-最大子数组和.json","keywords":null,"cover":null,"content":"<h1 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"53\">\n<li>最大子数组和</li>\n</ol>\n<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p><strong>子数组</strong> 是数组中的一个连续部分。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [1]\n输出：1</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n</ul>\n<p>题目来源:<a href=\"https://leetcode.cn/problems/maximum-subarray/description/\">https://leetcode.cn/problems/maximum-subarray/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int maxSubArray(int[] nums) &#123;\n        &#x2F;&#x2F;每次都更新局部的sum，并且每次都会更新全局的sum，贪心算法就体现在：当局部sum小于等于0时，就重置局部sum，这也是贪心算法的体现【略显牵强】\n        int max_sum&#x3D;Integer.MIN_VALUE;\n        int sum_temp&#x3D;0;\n        for(int i&#x3D;0;i&lt;nums.length;i++)&#123;\n            &#x2F;&#x2F;每次都更新sum\n            sum_temp+&#x3D;nums[i];\n            &#x2F;&#x2F;并且每次更新完sum都需要判断当前sum是否是全局最大sum\n            if(sum_temp&gt;max_sum)&#123;\n                max_sum&#x3D;sum_temp;\n            &#125;\n            &#x2F;&#x2F;如果当前的局部sum已经小于等于0了，那么就重新统计局部sum，\n            if(sum_temp&lt;&#x3D;0) sum_temp&#x3D;0;\n        &#125;\n\n        return max_sum;\n\n    &#125;\n&#125;</code></pre>\n\n","text":"53.最大子数组和题目描述： 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部分。 example 1: 输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C\"><span class=\"toc-text\">53.最大子数组和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"55.跳跃游戏","uid":"533fd882f71315e5bf31b51d128773b6","slug":"55-跳跃游戏","date":"2022-12-05T13:16:58.000Z","updated":"2022-12-05T13:20:09.987Z","comments":true,"path":"api/articles/55-跳跃游戏.json","keywords":null,"cover":null,"text":"55.跳跃游戏题目描述： 跳跃游戏 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个下标。 example 1: 输入：nums &#x3D; [2,3,1,1,4] 输出：true...","link":"","photos":[],"count_time":{"symbolsCount":897,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"376.摆动序列","uid":"872b236e099a38439f77f6b1b2e6e4dd","slug":"376-摆动序列","date":"2022-12-01T15:06:49.000Z","updated":"2022-12-01T15:12:14.867Z","comments":true,"path":"api/articles/376-摆动序列.json","keywords":null,"cover":null,"text":"376.摆动序列题目描述： 摆动序列 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。 例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}