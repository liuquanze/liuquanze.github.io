{"title":"134.加油站","uid":"d6d0de907a6cde5432aeecaa7255f84f","slug":"134-加油站","date":"2022-12-16T14:02:43.000Z","updated":"2022-12-16T14:05:41.723Z","comments":true,"path":"api/articles/134-加油站.json","keywords":null,"cover":null,"content":"<h1 id=\"134-加油站\"><a href=\"#134-加油站\" class=\"headerlink\" title=\"134.加油站\"></a>134.加油站</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"134\">\n<li>加油站</li>\n</ol>\n<p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p>\n<p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p>\n<p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: gas &#x3D; [1,2,3,4,5], cost &#x3D; [3,4,5,1,2]\n输出: 3\n解释:\n从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 &#x3D; 0 + 4 &#x3D; 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 &#x3D; 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 &#x3D; 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 &#x3D; 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 &#x3D; 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: gas &#x3D; [2,3,4], cost &#x3D; [3,4,3]\n输出: -1\n解释:\n你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 &#x3D; 0 + 4 &#x3D; 4 升汽油\n开往 0 号加油站，此时油箱有 4 - 3 + 2 &#x3D; 3 升汽油\n开往 1 号加油站，此时油箱有 3 - 3 + 3 &#x3D; 3 升汽油\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\n因此，无论怎样，你都不可能绕环路行驶一周。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>gas.length == n</code></li>\n<li><code>cost.length == n</code></li>\n<li><code>1 &lt;= n &lt;= 105</code></li>\n<li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/gas-station/\">https://leetcode.cn/problems/gas-station/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;** \n    若cost之和大于gas之和，则必定没有起点可以完成绕圈任务。\n    这里使用的是贪心算法，我们从0开始行驶，并在行驶途中计算剩余汽油量，若在位置i处出现没有油的情况，则直接忽略0到当前位置i之间0-i的所有位置，因为他们都不可能成为起点，直接将当前位置的后一个位子i+1作为起点。别问为什么0-i之间就不存在起点了，这就是贪心，举不出反例就是真理。\n*&#x2F;\n\nclass Solution &#123;\n    public int canCompleteCircuit(int[] gas, int[] cost) &#123;\n        &#x2F;&#x2F;行驶途中的汽油剩余量\n        int curSum&#x3D;0;\n        &#x2F;&#x2F;总加油量与总耗油量的差值\n        int totalSum&#x3D;0;\n        &#x2F;&#x2F;当前汽车的起始位置\n        int start&#x3D;0;\n        for(int i&#x3D;0;i&lt;cost.length;i++)&#123;\n            &#x2F;&#x2F;计算此时的汽油剩余量\n            curSum+&#x3D;gas[i]-cost[i];\n            &#x2F;&#x2F;继续更新总的汽油剩余量\n            totalSum+&#x3D;gas[i]-cost[i];\n            &#x2F;&#x2F;若当前的汽车的汽油剩余量已经小于0，则更新起始位置为下一个位置，并将当前汽油量置为0\n            if(curSum&lt;0)&#123;\n                start&#x3D;i+1;\n                curSum&#x3D;0;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;若cost之和大于gas之和，则必定没有起点可以完成绕圈任务。\n        if(totalSum&gt;&#x3D;0) return start;\n        return -1;\n    &#125;\n&#125;</code></pre>\n\n","text":"134.加油站题目描述： 加油站 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。 给定两个整数数组 ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":109,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":115,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":109,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#134-%E5%8A%A0%E6%B2%B9%E7%AB%99\"><span class=\"toc-text\">134.加油站</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"135.分发糖果","uid":"1aae7d13b3ffa5a2f6f89a93b626eafb","slug":"135-分发糖果","date":"2022-12-17T11:18:01.000Z","updated":"2022-12-17T11:22:35.116Z","comments":true,"path":"api/articles/135-分发糖果.json","keywords":null,"cover":null,"text":"135.分发糖果问题描述： 分发糖果 n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。 你需要按照以下要求，给这些孩子分发糖果： 每个孩子至少分配到 1 个糖果。 相邻两个孩子评分更高的孩子会获得更多的糖果。 请你给每个孩子分发糖果，计算并返回需要准备的...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结果与算法","slug":"数据结果与算法","count":1,"path":"api/categories/数据结果与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":115,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":109,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"1005.K次取反后最大化的数组和","uid":"684490a86ab5f156b0b9d2e5dc331300","slug":"1005-K次取反后最大化的数组和","date":"2022-12-11T13:26:50.000Z","updated":"2022-12-11T13:29:08.669Z","comments":true,"path":"api/articles/1005-K次取反后最大化的数组和.json","keywords":null,"cover":null,"text":"1005.K次取反后最大化的数组和题目描述： K 次取反后最大化的数组和 给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组： 选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。 重复这个过程恰好 k 次。可以多次选择同一个下标 i 。 以这种方...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":109,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":115,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":109,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}