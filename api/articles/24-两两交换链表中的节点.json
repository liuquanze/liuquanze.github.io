{"title":"24.两两交换链表中的节点","uid":"997023f756e83c602ad393bfa331d66a","slug":"24-两两交换链表中的节点","date":"2022-08-24T14:35:56.000Z","updated":"2022-08-24T14:47:27.759Z","comments":true,"path":"api/articles/24-两两交换链表中的节点.json","keywords":null,"cover":null,"content":"<h1 id=\"24-两两交换链表中的节点\"><a href=\"#24-两两交换链表中的节点\" class=\"headerlink\" title=\"24.两两交换链表中的节点\"></a>24.两两交换链表中的节点</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"24\">\n<li>两两交换链表中的节点</li>\n</ol>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p>example1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; [1,2,3,4]\n输出：[2,1,4,3]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; []\n输出：[]</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; [1]\n输出：[1]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\">https://leetcode.cn/problems/swap-nodes-in-pairs/</a></p>\n<p>题解：<a href=\"https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF\">https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val &#x3D; val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val &#x3D; val; this.next &#x3D; next; &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public ListNode swapPairs(ListNode head) &#123;\n        ListNode head_node&#x3D;new ListNode();\n        head_node.next&#x3D;head;\n        &#x2F;&#x2F;活动指针，指向的是当前需要交换的节点的前一个节点，方便交换，这里之所以采用虚拟头节点，是为了统一化处理\n        ListNode p&#x3D;head_node;\n        while(p.next!&#x3D;null&amp;&amp;p.next.next!&#x3D;null)&#123;\n            &#x2F;&#x2F;指向需要交换的第一个节点\n            ListNode temp&#x3D;p.next;\n            &#x2F;&#x2F;指向需要交换的第二个节点\n            ListNode temp_next&#x3D;p.next.next;\n            &#x2F;&#x2F;首先将p指向第二个节点\n            p.next&#x3D;temp_next;\n            &#x2F;&#x2F;第一个节点指向第二个节点原本指向的后续链表\n            temp.next&#x3D;temp_next.next;\n            &#x2F;&#x2F;第二个节点指向一个节点\n            temp_next.next&#x3D;temp;\n            &#x2F;&#x2F;将活动节点后移，指向下一对需要交换的节点的前一个节点，\n            p&#x3D;p.next.next;\n\n        &#125;\n        &#x2F;&#x2F;返回调整后的链表\n        return head_node.next;\n    &#125;\n&#125;</code></pre>\n\n\n\n","text":"24.两两交换链表中的节点题目描述： 两两交换链表中的节点 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 example1: 输入：head &#x3D; [1,2,3,4] 输出：[2,1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":67,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":70,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":66,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">24.两两交换链表中的节点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"142.环形链表Ⅱ","uid":"3775c9e904a11de6ad41f14528d2779f","slug":"142-环形链表Ⅱ","date":"2022-08-27T12:12:23.000Z","updated":"2022-08-27T12:18:55.647Z","comments":true,"path":"api/articles/142-环形链表Ⅱ.json","keywords":null,"cover":null,"text":"142.环形链表Ⅱ题目描述： 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":67,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":70,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":66,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"206.反转链表","uid":"04d169a11d3cee4253a53c23de1dbd14","slug":"206-反转链表","date":"2022-08-23T13:56:14.000Z","updated":"2022-08-24T14:48:10.396Z","comments":true,"path":"api/articles/206-反转链表.json","keywords":null,"cover":null,"text":"206.反转链表题目描述： 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 example 1: 输入：head &#x3D; [1,2,3,4,5] 输出：[5,4,3,2,1] example 2: 输入：head &#x3D; [1,2] 输出...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":67,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":70,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":66,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}