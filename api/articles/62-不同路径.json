{"title":"62.不同路径","uid":"c2410b2838d2b960665ad0be86344655","slug":"62-不同路径","date":"2023-01-16T14:31:26.000Z","updated":"2023-01-16T14:34:41.429Z","comments":true,"path":"api/articles/62-不同路径.json","keywords":null,"cover":null,"content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"62\">\n<li>不同路径</li>\n</ol>\n<p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：m &#x3D; 3, n &#x3D; 7\n输出：28</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：m &#x3D; 3, n &#x3D; 2\n输出：3\n解释：\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右\n3. 向下 -&gt; 向右 -&gt; 向下</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：m &#x3D; 7, n &#x3D; 3\n输出：28</code></pre>\n\n<p>example 4:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：m &#x3D; 3, n &#x3D; 3\n输出：6</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= m, n &lt;= 100</code></li>\n<li>题目数据保证答案小于等于 <code>2 * 109</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/description/\">https://leetcode.cn/problems/unique-paths/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int uniquePaths(int m, int n) &#123;\n        &#x2F;&#x2F;初始化，表示到达每一个位置的走法\n        int[][] dp&#x3D;new int[m][n];\n        &#x2F;&#x2F;因为出发位置是（0，0），所以[0][j]和[i][0]只能存在一种走法\n        for(int i&#x3D;0;i&lt;m;i++)&#123;\n            dp[i][0]&#x3D;1;\n        &#125;\n        for(int j&#x3D;0;j&lt;n;j++)&#123;\n            dp[0][j]&#x3D;1;\n        &#125;\n\n        &#x2F;&#x2F;递推公式：dp[k][s]&#x3D;dp[k-1][s]+dp[k][s-1]\n        for(int k&#x3D;1;k&lt;m;k++)&#123;\n            for(int s&#x3D;1;s&lt;n;s++)&#123;\n                dp[k][s]&#x3D;dp[k-1][s]+dp[k][s-1];\n            &#125;\n        &#125;\n\n        return dp[m-1][n-1];\n    &#125;\n&#125;</code></pre>\n\n","text":"题目描述： 不同路径 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。 问总共有多少条不同的路径？ example 1: 输入：m &...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":11,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"739.每日温度","uid":"6355be0900ada8ac56a8e9489858559d","slug":"739-每日温度","date":"2023-01-22T14:05:44.000Z","updated":"2023-01-22T14:09:21.400Z","comments":true,"path":"api/articles/739-每日温度.json","keywords":null,"cover":null,"text":"739.每日温度问题描述： 每日温度 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。 example 1:...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"},{"name":"单调栈","slug":"单调栈","count":2,"path":"api/tags/单调栈.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"509.斐波那契数列","uid":"084b6d4a3eb1719c740e694cde17f8e9","slug":"509-斐波那契数列","date":"2023-01-06T09:13:18.000Z","updated":"2023-01-06T09:16:03.037Z","comments":true,"path":"api/articles/509-斐波那契数列.json","keywords":null,"cover":null,"text":"509.斐波那契数列题目描述： 斐波那契数 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) &#x3D; 0，F(1) &#x3D; 1 F(n) &#x3D; F(n -...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":111,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":120,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":11,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":114,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}