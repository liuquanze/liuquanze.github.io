{"title":"寻找比目标字母大的最小字母","uid":"d776ea82847944d1f9a7d73d3912befe","slug":"寻找比目标字母大的最小字母","date":"2022-08-05T01:53:07.000Z","updated":"2022-08-06T01:49:47.773Z","comments":true,"path":"api/articles/寻找比目标字母大的最小字母.json","keywords":null,"cover":null,"content":"<h1 id=\"744-寻找比目标字母大的最小字母\"><a href=\"#744-寻找比目标字母大的最小字母\" class=\"headerlink\" title=\"744. 寻找比目标字母大的最小字母\"></a>744. 寻找比目标字母大的最小字母</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><p>给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。</p>\n<p>在比较时，字母是依序循环出现的。举个例子：</p>\n<p>如果目标字母 target &#x3D; ‘z’ 并且字符列表为 letters &#x3D; [‘a’, ‘b’]，则答案返回 ‘a’</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target &#x3D; &quot;a&quot;\n输出: &quot;c&quot;</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: letters &#x3D; [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target &#x3D; &quot;c&quot;\n输出: &quot;f&quot;</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: letters &#x3D; [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target &#x3D; &quot;d&quot;\n输出: &quot;f&quot;</code></pre>\n\n\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/find-smallest-letter-greater-than-target\">https://leetcode.cn/problems/find-smallest-letter-greater-than-target</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>1.二分法：开区间</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public char nextGreatestLetter(char[] letters, char target) &#123;\n   \n        &#x2F;&#x2F;当target大于数组的最大值的时候，表示数组中所有元素均小于target，因为数组中字符是有序的。\n        if(target&gt;&#x3D;letters[letters.length-1])&#123;\n            return letters[0];\n        &#125;\n        &#x2F;&#x2F;若上述if语句不符合则表示该数组必定存在大于target的元素。\n        int left&#x3D;0;\n        int right&#x3D;letters.length-1;\n                &#x2F;&#x2F; 如果为左闭右闭那么while里面的判断语句是left&lt;&#x3D;right ；若为左闭右开或者左开右闭，则while的判断语句是left &lt; right\n        &#x2F;&#x2F;左开右闭：left&#x3D;mid;right&#x3D;mid-1;\n        &#x2F;&#x2F;左闭右开：left&#x3D;mid+1;right&#x3D;mid;\n        while(left&lt;right)&#123;\n            int mid&#x3D;(right-left)&#x2F;2+left;\n            if(letters[mid]&gt;target)&#123;    &#x2F;&#x2F;当mid指向的元素大于target时，则有可能是最小的大于target的元素\n                right&#x3D;mid;\n            &#125;else&#123;     &#x2F;&#x2F;当mid元素小于或等于target时，mid指向的元素必然不是我们最终要找的元素，可以直接跳过mid指向的元素，mid+1\n                left&#x3D;mid+1;\n            &#125;\n        &#125;\n        return letters[left];\n     \n\n    &#125;\n&#125;\n</code></pre>\n\n<p>2.线性搜索：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public char nextGreatestLetter(char[] letters, char target) &#123;\n        int min&#x3D;Integer.MAX_VALUE;\n        int min_index&#x3D;0;\n        for(int i&#x3D;0;i&lt;letters.length;i++)&#123;\n            &#x2F;&#x2F;i指向的元素在target后面，则比较当前维护的最短距离\n            if(letters[i]-target&gt;0)&#123;\n                min&#x3D;Math.min(min,letters[i]-target);\n                if(min&#x3D;&#x3D;letters[i]-target)&#123;\n                    min_index&#x3D;i;\n                &#125;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;若target大于letters数组中的所有元素，则直接返回0号元素\n        if(min&#x3D;&#x3D;Integer.MAX_VALUE)&#123;\n            return letters[0];\n        &#125;\n        return letters[min_index];\n    &#125;\n&#125;</code></pre>\n\n<p>3.二分法：闭区间</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public char nextGreatestLetter(char[] letters, char target) &#123;\n        if(letters[letters.length-1]&lt;&#x3D;target)&#123;\n            return letters[0];\n        &#125;\n        int right&#x3D;letters.length;\n        int left&#x3D;0;\n        int result&#x3D;0;\n        &#x2F;&#x2F;闭区间写法，left&lt;&#x3D;right；right&#x3D;mid-1;left&#x3D;mid+1;因为当mid指向的元素大于target时，该元素可能就是我们要找的目标元素，所以需要记录mid指向的元素result&#x3D;mid;，对比开区间，right&#x3D;mid；left&lt;right当left&#x3D;&#x3D;right时结束循环，不会漏掉这个解，但是闭区间更清楚一些\n        while(left&lt;&#x3D;right)&#123;\n            int mid&#x3D;(right-left)&#x2F;2+left;\n            if(letters[mid]&gt;target)&#123;\n                result&#x3D;mid;\n                right&#x3D;mid-1;\n            &#125;else&#123;\n                left&#x3D;mid+1;\n            &#125;\n        &#125;\n        return letters[result];\n    &#125;\n&#125;</code></pre>\n\n\n\n","text":"744. 寻找比目标字母大的最小字母题目描述：给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。 在比较时，字母是依序循环出现的。举个例子： 如果目标字母 target &#x3...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":105,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":111,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":105,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D\"><span class=\"toc-text\">744. 寻找比目标字母大的最小字母</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Pycharm模块不存在","uid":"bf9943093888157a40e49bab81aa424f","slug":"Pycharm模块不存在","date":"2022-08-05T02:33:06.000Z","updated":"2022-08-05T02:39:34.666Z","comments":true,"path":"api/articles/Pycharm模块不存在.json","keywords":null,"cover":null,"text":"Pycharm模块不存在问题描述：当运行Python文件时，出现以下报错： python中已经用pip安装了某模块，但pycharm中为什么仍然显示没有该模块 出现原因：pycharm里面自带一个Python解释器，而这个里面是没有几个模块的。因为咱们在DOS命令行里面下载的模块...","link":"","photos":[],"count_time":{"symbolsCount":571,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"报错","slug":"报错","count":3,"path":"api/tags/报错.json"},{"name":"Pycharm","slug":"Pycharm","count":1,"path":"api/tags/Pycharm.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"x的平方根","uid":"3b8822123bb08af7e60b15ed39819f81","slug":"x的平方根","date":"2022-08-04T01:36:47.000Z","updated":"2022-08-06T03:39:18.130Z","comments":true,"path":"api/articles/x的平方根.json","keywords":null,"cover":null,"text":"69. x的平方根题目描述：给你一个非负整数 x ，计算并返回 x 的 算术平方根 。 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。 example 1: 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":105,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":111,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":105,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}