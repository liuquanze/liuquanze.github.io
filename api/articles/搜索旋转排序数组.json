{"title":"搜索旋转排序数组","uid":"ea76d2e3b8ba7df05f2a9007a5c4d57e","slug":"搜索旋转排序数组","date":"2022-08-07T02:54:15.000Z","updated":"2022-08-07T02:57:32.605Z","comments":true,"path":"api/articles/搜索旋转排序数组.json","keywords":null,"cover":null,"content":"<h1 id=\"33-搜索旋转排序数组\"><a href=\"#33-搜索旋转排序数组\" class=\"headerlink\" title=\"33. 搜索旋转排序数组\"></a>33. 搜索旋转排序数组</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><h4 id=\"33-搜索旋转排序数组-1\"><a href=\"#33-搜索旋转排序数组-1\" class=\"headerlink\" title=\"33. 搜索旋转排序数组\"></a>33. 搜索旋转排序数组</h4><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>\n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>\n<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p>\n<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0\n输出：4</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3\n输出：-1</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [1], target &#x3D; 0\n输出：-1</code></pre>\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/search-in-rotated-sorted-array/\">https://leetcode.cn/problems/search-in-rotated-sorted-array/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int search(int[] nums, int target) &#123;\n        &#x2F;&#x2F;初始边界\n        int left&#x3D;0;\n        int right&#x3D;nums.length-1;\n        &#x2F;&#x2F;区间\n        while(left&lt;&#x3D;right)&#123;\n            int mid&#x3D;(right-left)&#x2F;2+left;\n            if(nums[mid]&#x3D;&#x3D;target) return mid;\n            &#x2F;&#x2F;mid位于左边的升序序列当中\n            if(nums[mid]&gt;&#x3D;nums[left])&#123;\n                &#x2F;&#x2F;target位于左侧有序序列中\n                if(target&lt;nums[mid]&amp;&amp;target&gt;&#x3D;nums[left])&#123;\n                    right&#x3D;mid-1;\n                &#125;else&#123;\n                    left&#x3D;mid+1;\n                &#125;\n\n            &#125;else&#123;              &#x2F;&#x2F;右侧为升序\n                &#x2F;&#x2F;target位于右侧有序序列中\n                if(target&gt;nums[mid]&amp;&amp;target&lt;&#x3D;nums[right])&#123;\n                    left&#x3D;mid+1;\n                &#125;else&#123;\n                    right&#x3D;mid-1;\n                &#125;\n            &#125;\n        &#125;\n        return -1;\n    &#125;\n&#125;</code></pre>\n\n","text":"33. 搜索旋转排序数组题目描述：33. 搜索旋转排序数组整数数组 nums 按升序排列，数组中的值 互不相同 。 在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":102,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":108,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":102,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">33. 搜索旋转排序数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-1\"><span class=\"toc-text\">33. 搜索旋转排序数组</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"第一个错误版本","uid":"37fafcaad932621c324a857d69f2ce34","slug":"第一个错误版本","date":"2022-08-08T02:00:30.000Z","updated":"2022-08-08T02:10:52.932Z","comments":true,"path":"api/articles/第一个错误版本.json","keywords":null,"cover":null,"text":"278.第一个错误版本题目描述：278. 第一个错误的版本你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":102,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":108,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":102,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2022-08-07T02:30:53.375Z","updated":"2022-07-17T11:23:40.487Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}