{"title":"232.用栈实现队列","uid":"d91274a3d01b11b2d199e36958cb424f","slug":"232-用栈实现队列","date":"2022-09-12T11:50:50.000Z","updated":"2022-09-12T11:53:41.606Z","comments":true,"path":"api/articles/232-用栈实现队列.json","keywords":null,"cover":null,"content":"<h1 id=\"232-用栈实现队列\"><a href=\"#232-用栈实现队列\" class=\"headerlink\" title=\"232.用栈实现队列\"></a>232.用栈实现队列</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"232\">\n<li>用栈实现队列</li>\n</ol>\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>\n<p>实现 <code>MyQueue</code> 类：</p>\n<ul>\n<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>\n<li><code>int pop()</code> 从队列的开头移除并返回元素</li>\n<li><code>int peek()</code> 返回队列开头的元素</li>\n<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>\n</ul>\n<p><strong>说明：</strong></p>\n<ul>\n<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>\n<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n</ul>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：\n[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n输出：\n[null, null, null, 1, 1, false]\n\n解释：\nMyQueue myQueue &#x3D; new MyQueue();\nmyQueue.push(1); &#x2F;&#x2F; queue is: [1]\nmyQueue.push(2); &#x2F;&#x2F; queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); &#x2F;&#x2F; return 1\nmyQueue.pop(); &#x2F;&#x2F; return 1, queue is [2]\nmyQueue.empty(); &#x2F;&#x2F; return false</code></pre>\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; x &lt;&#x3D; 9<br>最多调用 100 次 push、pop、peek 和 empty<br>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）</p>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks\">https://leetcode.cn/problems/implement-queue-using-stacks</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class MyQueue &#123;\n    Stack&lt;Integer&gt; in;\n    Stack&lt;Integer&gt; out;\n\n    public MyQueue() &#123;\n        in&#x3D;new Stack&lt;&gt;();\n        out&#x3D;new Stack&lt;&gt;();\n    &#125;\n    \n    public void push(int x) &#123;\n        in.push(x);\n    &#125;\n    \n    &#x2F;&#x2F;输出栈为空，则将输入栈的元素全部存入输出栈，然后pop输出栈；若输出栈不为空，则直接pop输出栈\n    public int pop() &#123;\n        if(out.isEmpty())&#123;\n            while(!in.isEmpty())&#123;\n                int temp&#x3D;in.pop();\n                out.push(temp);\n            &#125;\n        &#125;\n        return out.pop();\n\n\n    &#125;\n    \n    &#x2F;&#x2F;输出栈为空，则将输入栈的元素全部存入输出栈，然后peek输出栈；若输出栈不为空，则直接peek输出栈\n    public int peek() &#123;\n        if(out.isEmpty())&#123;\n            while(!in.isEmpty())&#123;\n                int temp&#x3D;in.pop();\n                out.push(temp);\n            &#125;\n        &#125;\n        return out.peek();\n    &#125;\n    &#x2F;&#x2F;输入输出栈均为空时，队列为空\n    public boolean empty() &#123;\n        return in.isEmpty()&amp;&amp;out.isEmpty();\n\n    &#125;\n&#125;\n\n&#x2F;**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj &#x3D; new MyQueue();\n * obj.push(x);\n * int param_2 &#x3D; obj.pop();\n * int param_3 &#x3D; obj.peek();\n * boolean param_4 &#x3D; obj.empty();\n *&#x2F;</code></pre>\n\n","text":"232.用栈实现队列题目描述： 用栈实现队列 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":118,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":112,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">232.用栈实现队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"225.用队列实现栈","uid":"5411a6b47b43d9c6d288402eac141a08","slug":"225-用队列实现栈","date":"2022-09-14T14:46:17.000Z","updated":"2022-09-14T14:48:54.649Z","comments":true,"path":"api/articles/225-用队列实现栈.json","keywords":null,"cover":null,"text":"225.用队列实现栈问题描述： 用队列实现栈 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。 实现 MyStack 类： void push(int x) 将元素 x 压入栈顶。 int pop() 移...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":118,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":112,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"28.实现 strStr()","uid":"92bbfd2514ed32aedece3fa7e7cce0b7","slug":"28-实现-strStr","date":"2022-09-11T14:34:12.000Z","updated":"2022-09-11T14:37:46.446Z","comments":true,"path":"api/articles/28-实现-strStr.json","keywords":null,"cover":null,"text":"28.实现 strStr()题目描述： 实现 strStr() 实现 strStr() 函数。 给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。 说...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":118,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":112,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}