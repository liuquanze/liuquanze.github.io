{"title":"454.四数相加Ⅱ","uid":"d39f1cd0e2f648b0b919de3afe262477","slug":"454-四数相加Ⅱ","date":"2022-08-31T01:01:44.000Z","updated":"2022-08-31T01:07:26.665Z","comments":true,"path":"api/articles/454-四数相加Ⅱ.json","keywords":null,"cover":null,"content":"<h1 id=\"454-四数相加Ⅱ\"><a href=\"#454-四数相加Ⅱ\" class=\"headerlink\" title=\"454.四数相加Ⅱ\"></a>454.四数相加Ⅱ</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"454\">\n<li>四数相加 II</li>\n</ol>\n<p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p>\n<ul>\n<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]\n输出：2\n解释：\n两个元组如下：\n1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0\n2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]\n输出：1</code></pre>\n\n<p>提示：</p>\n<p>n &#x3D;&#x3D; nums1.length<br>n &#x3D;&#x3D; nums2.length<br>n &#x3D;&#x3D; nums3.length<br>n &#x3D;&#x3D; nums4.length<br>1 &lt;&#x3D; n &lt;&#x3D; 200<br>-228 &lt;&#x3D; nums1[i], nums2[i], nums3[i], nums4[i] &lt;&#x3D; 228</p>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/4sum-ii\">https://leetcode.cn/problems/4sum-ii</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) &#123;\n        HashMap&lt;Integer,Integer&gt; hashMap&#x3D;new HashMap&lt;&gt;();\n        &#x2F;&#x2F;记录可以满足四数相加为0的组合的个数\n        int res&#x3D;0;\n        &#x2F;&#x2F;遍历nums1和nums2元素相加之和，存入map中，key为两数之和，value是key两数之和出现的次数\n        for(int num1:nums1)&#123;\n            for(int num2:nums2)&#123;\n                int temp&#x3D;num1+num2;\n                if(hashMap.containsKey(temp))&#123;\n                    hashMap.put(temp,hashMap.get(temp)+1);\n                &#125;else&#123;\n                    hashMap.put(temp,1);\n                &#125;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;遍历nums3和nums4元素相加之和，检查map中是否存在0-两数之和，如果存在，则表示存在一组满足条件的解，并将res加上map中的value，表示\n        &#x2F;&#x2F;存在多个解\n        for(int num3:nums3)&#123;\n            for(int num4:nums4)&#123;\n                int temp&#x3D;num3+num4;\n                if(hashMap.containsKey(0-temp))&#123;\n                    res+&#x3D;hashMap.get(0-temp);\n                &#125;\n            &#125;\n        &#125;\n        return res;\n\n    &#125;\n&#125;</code></pre>\n\n","text":"454.四数相加Ⅱ题目描述： 四数相加 II 给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足： 0 &lt;= i, j, k, l &lt; n nums1[i] + nums2...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":108,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":114,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":108,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#454-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0%E2%85%A1\"><span class=\"toc-text\">454.四数相加Ⅱ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"15.三数之和","uid":"6402807c619d1044cedb6c34299402ec","slug":"15-三数之和","date":"2022-08-31T01:40:26.000Z","updated":"2022-08-31T01:42:55.797Z","comments":true,"path":"api/articles/15-三数之和.json","keywords":null,"cover":null,"text":"15.三数之和题目描述： 三数之和 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":108,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":114,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":108,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"202.快乐数","uid":"b036e493bdd6ef884e6984b888ff5e94","slug":"202-快乐数","date":"2022-08-29T13:03:42.000Z","updated":"2022-08-29T13:09:26.645Z","comments":true,"path":"api/articles/202-快乐数.json","keywords":null,"cover":null,"text":"202.快乐数题目描述： 快乐数 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」 定义为： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果这个过程 结果为 1，那么这个数就...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":108,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":114,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":108,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}