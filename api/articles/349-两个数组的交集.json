{"title":"349.两个数组的交集","uid":"c18601503540d5650db70b6721599b9d","slug":"349-两个数组的交集","date":"2022-08-29T12:47:57.000Z","updated":"2022-08-29T12:50:21.782Z","comments":true,"path":"api/articles/349-两个数组的交集.json","keywords":null,"cover":null,"content":"<h1 id=\"349-两个数组的交集\"><a href=\"#349-两个数组的交集\" class=\"headerlink\" title=\"349.两个数组的交集\"></a>349.两个数组的交集</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"349\">\n<li>两个数组的交集</li>\n</ol>\n<p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]\n输出：[2]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]\n输出：[9,4]\n解释：[4,9] 也是可通过的</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">https://leetcode.cn/problems/intersection-of-two-arrays/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int[] intersection(int[] nums1, int[] nums2) &#123;\n        if (nums1 &#x3D;&#x3D; null || nums1.length &#x3D;&#x3D; 0 || nums2 &#x3D;&#x3D; null || nums2.length &#x3D;&#x3D; 0) &#123;\n            return new int[0];\n        &#125;\n        &#x2F;&#x2F;存储数组元素\n        Set&lt;Integer&gt; set1 &#x3D; new HashSet&lt;&gt;();\n        &#x2F;&#x2F;存储结果\n        Set&lt;Integer&gt; resSet &#x3D; new HashSet&lt;&gt;();\n        &#x2F;&#x2F;遍历数组1\n        for (int i : nums1) &#123;\n            set1.add(i);\n        &#125;\n        &#x2F;&#x2F;遍历数组2的过程中判断哈希表中是否存在该元素，若存在，则存入resSet中，因为输出结果是唯一的，因此并集的结果使用set集合来存储\n        for (int i : nums2) &#123;\n            if (set1.contains(i)) &#123;\n                resSet.add(i);\n            &#125;\n        &#125;\n        &#x2F;&#x2F;将结果集合转为数组\n        return resSet.stream().mapToInt(x -&gt; x).toArray();\n    &#125;\n&#125;</code></pre>\n\n","text":"349.两个数组的交集题目描述： 两个数组的交集 给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。 example 1: 输入：nums1 &#x3D; [1,2,2,1], nums2 &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":94,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":97,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":93,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86\"><span class=\"toc-text\">349.两个数组的交集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"202.快乐数","uid":"b036e493bdd6ef884e6984b888ff5e94","slug":"202-快乐数","date":"2022-08-29T13:03:42.000Z","updated":"2022-08-29T13:09:26.645Z","comments":true,"path":"api/articles/202-快乐数.json","keywords":null,"cover":null,"text":"202.快乐数题目描述： 快乐数 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」 定义为： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果这个过程 结果为 1，那么这个数就...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":94,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":97,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":93,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"242.有效的字母异位词","uid":"4b837d23486a4c7408641cab9ca86e52","slug":"242-有效的字母异位词","date":"2022-08-28T13:00:21.000Z","updated":"2022-08-28T13:05:14.925Z","comments":true,"path":"api/articles/242-有效的字母异位词.json","keywords":null,"cover":null,"text":"242.有效的字母异位词题目描述： 有效的字母异位词 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 注意：若 *s* 和 *t* 中每个字符出现的次数都相同，则称 *s* 和 *t* 互为字母异位词。 example 1： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":94,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":97,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":93,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}