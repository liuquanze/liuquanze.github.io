{"title":"700.二叉搜索树中的搜索","uid":"4e6e4747e1b3af852c2bcbf832cc15bd","slug":"700-二叉搜索树中的搜索","date":"2022-10-06T01:18:40.000Z","updated":"2022-10-06T01:20:43.541Z","comments":true,"path":"api/articles/700-二叉搜索树中的搜索.json","keywords":null,"cover":null,"content":"<h1 id=\"700-二叉搜索树中的搜索\"><a href=\"#700-二叉搜索树中的搜索\" class=\"headerlink\" title=\"700.二叉搜索树中的搜索\"></a>700.二叉搜索树中的搜索</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"700\">\n<li>二叉搜索树中的搜索</li>\n</ol>\n<p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p>\n<p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [4,2,7,1,3], val &#x3D; 2\n输出：[2,1,3]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [4,2,7,1,3], val &#x3D; 5\n输出：[]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>数中节点数在 <code>[1, 5000]</code> 范围内</li>\n<li><code>1 &lt;= Node.val &lt;= 107</code></li>\n<li><code>root</code> 是二叉搜索树</li>\n<li><code>1 &lt;= val &lt;= 107</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/search-in-a-binary-search-tree/\">https://leetcode.cn/problems/search-in-a-binary-search-tree/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public TreeNode findTree(TreeNode node,int val)&#123;\n        if(node&#x3D;&#x3D;null)\n            return null;\n        if(node.val&#x3D;&#x3D;val)\n            return node;\n        if(node.val&lt;val)&#123;\n            return findTree(node.right,val);\n        &#125;\n        return findTree(node.left,val);\n    &#125;\n\n    public TreeNode searchBST(TreeNode root, int val) &#123;\n        return findTree(root,val);\n    &#125;\n&#125;</code></pre>\n\n","text":"700.二叉搜索树中的搜索题目描述： 二叉搜索树中的搜索 给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 example 1： 输入：root...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":80,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":83,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":79,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":19,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">700.二叉搜索树中的搜索</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"98.验证二叉搜索树","uid":"dd5945836ee2298d3cd22289ae215e69","slug":"98-验证二叉搜索树","date":"2022-10-07T00:54:24.000Z","updated":"2022-10-07T00:56:16.337Z","comments":true,"path":"api/articles/98-验证二叉搜索树.json","keywords":null,"cover":null,"text":"98.验证二叉搜索树问题描述： 验证二叉搜索树 给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。 有效 二叉搜索树定义如下： 节点的左子树只包含 小于 当前节点的数。 节点的右子树只包含 大于 当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 ex...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":80,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":83,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":79,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":19,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"617.合并二叉树","uid":"df36dac409def39859c6c978ff85b201","slug":"617-合并二叉树","date":"2022-10-05T01:34:50.000Z","updated":"2022-10-05T01:37:39.793Z","comments":true,"path":"api/articles/617-合并二叉树.json","keywords":null,"cover":null,"text":"617.合并二叉树题目描述： 合并二叉树 给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":80,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":83,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":79,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":19,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}