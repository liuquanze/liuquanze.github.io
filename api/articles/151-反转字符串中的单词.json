{"title":"151.反转字符串中的单词","uid":"bf3e3be4adc10fbd226da035ce8a9591","slug":"151-反转字符串中的单词","date":"2022-09-06T13:39:09.000Z","updated":"2022-09-06T13:42:34.894Z","comments":true,"path":"api/articles/151-反转字符串中的单词.json","keywords":null,"cover":null,"content":"<h1 id=\"151-反转字符串中的单词\"><a href=\"#151-反转字符串中的单词\" class=\"headerlink\" title=\"151.反转字符串中的单词\"></a>151.反转字符串中的单词</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"151\">\n<li>反转字符串中的单词</li>\n</ol>\n<p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p>\n<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p>\n<p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p>\n<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：s &#x3D; &quot;the sky is blue&quot;\n输出：&quot;blue is sky the&quot;</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：s &#x3D; &quot;  hello world  &quot;\n输出：&quot;world hello&quot;\n解释：反转后的字符串中不能存在前导空格和尾随空格。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：s &#x3D; &quot;a good   example&quot;\n输出：&quot;example good a&quot;\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li>\n<li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/reverse-words-in-a-string\">https://leetcode.cn/problems/reverse-words-in-a-string</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public String reverseWords(String s) &#123;\n        &#x2F;&#x2F;源字符数组\n        char[] s_char&#x3D;s.toCharArray();\n        &#x2F;&#x2F;创建新的字符数组\n        char[] new_str&#x3D;new char[s_char.length+1];\n        &#x2F;&#x2F;新字符数组指针\n        int newStr_index&#x3D;0;\n        &#x2F;&#x2F;源字符数组指针，从末尾开始\n        int i&#x3D;s_char.length-1;\n        &#x2F;&#x2F;从后向前遍历\n        while(i&gt;&#x3D;0)&#123;\n            &#x2F;&#x2F;找到最后一个单词的末尾位置并记录\n            while(i&gt;&#x3D;0&amp;&amp;s_char[i]&#x3D;&#x3D;&#39; &#39;) i--;\n            int right&#x3D;i;\n            &#x2F;&#x2F;找到最后一个单词的起始位置并记录\n            while(i&gt;&#x3D;0&amp;&amp;s_char[i]!&#x3D;&#39; &#39;) i--;\n            int left&#x3D;i+1;\n            &#x2F;&#x2F;将原字符数组的最后一个单词，存入新字符数组的第一个单词位置\n            for(int j&#x3D;left;j&lt;&#x3D;right;j++)&#123;\n                new_str[newStr_index++]&#x3D;s_char[j];\n                &#x2F;&#x2F;若遍历到单词末尾，则添加空格\n                if(j&#x3D;&#x3D;right)&#123;\n                    new_str[newStr_index++]&#x3D;&#39; &#39;;\n                &#125;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;若原数组没有单词，则返回空字符串\n        if(newStr_index&#x3D;&#x3D;0)&#123;\n            return &quot;&quot;;\n            &#x2F;&#x2F;否则返回反转后的字符串\n        &#125;else&#123;\n            return new String(new_str,0,newStr_index-1);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n","text":"151.反转字符串中的单词题目描述： 反转字符串中的单词 给你一个字符串 s ，请你反转字符串中 单词 的顺序。 单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。 返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。 注意：输入字符串...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":63,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":66,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":62,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#151-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D\"><span class=\"toc-text\">151.反转字符串中的单词</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"剑指Offer58-II.左旋转字符串","uid":"2416193f75be6eeb61e08489a1aa53a0","slug":"剑指Offer58-II-左旋转字符串","date":"2022-09-07T13:28:59.000Z","updated":"2022-09-07T13:31:09.531Z","comments":true,"path":"api/articles/剑指Offer58-II-左旋转字符串.json","keywords":null,"cover":null,"text":"剑指Offer58-II.左旋转字符串题目描述：剑指 Offer 58 - II. 左旋转字符串 字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":63,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":66,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":62,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"05.替换空格","uid":"e719937f6951d143569f327df963f42d","slug":"05-替换空格","date":"2022-09-05T14:29:42.000Z","updated":"2022-09-05T14:35:56.634Z","comments":true,"path":"api/articles/05-替换空格.json","keywords":null,"cover":null,"text":"05.替换空格题目描述：剑指 Offer 05. 替换空格 请实现一个函数，把字符串 s 中的每个空格替换成”%20”。 example 1: 输入：s &#x3D; &quot;We are happy.&quot; 输出：&quot;We%20are%20happy.&quo...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":63,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":66,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":62,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}