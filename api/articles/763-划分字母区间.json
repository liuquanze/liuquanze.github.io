{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"763-划分字母区间","date":"2022-12-22T03:39:57.494Z","updated":"2022-12-22T03:44:34.979Z","comments":true,"path":"api/articles/763-划分字母区间.json","keywords":null,"cover":null,"content":"<hr>\n<p>title: 763.划分字母区间<br>date: 2022-12-22 11:39:57<br>categories:</p>\n<ul>\n<li>数据结构与算法<br>tags:</li>\n<li>Java</li>\n<li>leetcode</li>\n<li>贪心算法</li>\n</ul>\n<hr>\n<h1 id=\"763-划分字母区间\"><a href=\"#763-划分字母区间\" class=\"headerlink\" title=\"763.划分字母区间\"></a>763.划分字母区间</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"763\">\n<li>划分字母区间</li>\n</ol>\n<p>给你一个字符串 <code>s</code> 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p>\n<p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 <code>s</code> 。</p>\n<p>返回一个表示每个字符串片段的长度的列表。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：s &#x3D; &quot;ababcbacadefegdehijhklij&quot;\n输出：[9,7,8]\n解释：\n划分结果为 &quot;ababcbaca&quot;、&quot;defegde&quot;、&quot;hijhklij&quot; 。\n每个字母最多出现在一个片段中。\n像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 这样的划分是错误的，因为划分的片段数较少。 </code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：s &#x3D; &quot;eccbbbbdec&quot;\n输出：[10]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 500</code></li>\n<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/partition-labels/description/\">https://leetcode.cn/problems/partition-labels/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public List&lt;Integer&gt; partitionLabels(String s) &#123;\n        &#x2F;&#x2F;创建列表，用于最后划分的各个区间长度\n        List&lt;Integer&gt; list&#x3D;new LinkedList&lt;&gt;();\n        &#x2F;&#x2F;存储每个字符的最远边界\n        int[] edge&#x3D;new int[26];\n        &#x2F;&#x2F;将字符串转换为字符数组\n        char[] chars&#x3D;s.toCharArray();\n        &#x2F;&#x2F;获取每个字符的最远边界\n        for(int i&#x3D;0;i&lt;chars.length;i++)&#123;\n            edge[chars[i]-&#39;a&#39;]&#x3D;i;\n        &#125;\n        &#x2F;&#x2F;当前遍历过的字符的最远边界\n        int temp_edge&#x3D;0;\n        &#x2F;&#x2F;前一次划分的区间的边界\n        int last&#x3D;-1;\n        for(int i&#x3D;0;i&lt;chars.length;i++)&#123;\n            &#x2F;&#x2F;更新字符的最远边界\n            temp_edge&#x3D;Math.max(temp_edge,edge[chars[i]-&#39;a&#39;]);\n            &#x2F;&#x2F;如果已经到达了最远边界，则可以进行区间的划分了，由于这个tempt_edge是当前遍历字符的最远边界，表示其中字符的最远边界均小于或等于temp_edge,因此划分完成之后，其中包含的字符必定都在这个区间之内了\n            if(i&#x3D;&#x3D;temp_edge)&#123;\n                list.add(i-last);\n                last&#x3D;i;\n            &#125;\n        &#125;\n        return list;\n\n\n    &#125;\n&#125;</code></pre>\n\n","feature":true,"text":" title: 763.划分字母区间date: 2022-12-22 11:39:57categories: 数据结构与算法tags: Java leetcode 贪心算法 763.划分字母区间题目描述： 划分字母区间 给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#763-%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4\"><span class=\"toc-text\">763.划分字母区间</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"56.合并区间","uid":"708bb9dc20508eae07ec4c15173c31e9","slug":"56-合并区间","date":"2022-12-23T14:03:17.000Z","updated":"2022-12-23T14:09:32.282Z","comments":true,"path":"api/articles/56-合并区间.json","keywords":null,"cover":null,"text":"56.合并区间题目描述：以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。 example 1: 输入：inte...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":107,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":113,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":107,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":13,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"435.无重叠区间","uid":"839a3a8f14077c9f4a60c6ddbc52816e","slug":"435-无重叠区间","date":"2022-12-21T14:23:54.000Z","updated":"2022-12-21T14:26:37.687Z","comments":true,"path":"api/articles/435-无重叠区间.json","keywords":null,"cover":null,"text":"435.无重叠区间题目描述： 无重叠区间 给定一个区间的集合 intervals ，其中 intervals[i] = [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。 example 1： 输入: intervals &#x3D; [[1,2...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":107,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":113,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":107,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":13,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true}}