{"title":"84.柱状图中最大的矩形","uid":"5ddbb467241068095a0f1672c50c32fb","slug":"84-柱状图中最大的矩形","date":"2023-01-26T03:16:19.000Z","updated":"2023-01-26T03:18:31.822Z","comments":true,"path":"api/articles/84-柱状图中最大的矩形.json","keywords":null,"cover":null,"content":"<h1 id=\"84-柱状图中最大的矩形\"><a href=\"#84-柱状图中最大的矩形\" class=\"headerlink\" title=\"84.柱状图中最大的矩形\"></a>84.柱状图中最大的矩形</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"84\">\n<li>柱状图中最大的矩形</li>\n</ol>\n<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：heights &#x3D; [2,1,5,6,2,3]\n输出：10\n解释：最大的矩形为图中红色区域，面积为 10</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入： heights &#x3D; [2,4]\n输出： 4</code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= heights.length &lt;=105</code></li>\n<li><code>0 &lt;= heights[i] &lt;= 104</code></li>\n</ul>\n<p>题目描述：</p>\n<p><a href=\"https://leetcode.cn/problems/largest-rectangle-in-histogram/description/\">https://leetcode.cn/problems/largest-rectangle-in-histogram/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int largestRectangleArea(int[] heights) &#123;\n        &#x2F;&#x2F;由于最大面积&#x3D;MAX(height[i]*(minRight[i]-minLeft[i]-1))求得，其中，minLeft[i]表示柱子i左边第一个高度小于i的柱子的下标，minRight表示柱子i右边第一个高度小于i的柱子的下标\n        int[] minLeft&#x3D;new int[heights.length];\n        int[] minRight&#x3D;new int[heights.length];\n\n        &#x2F;&#x2F;构造两个数组\n        int length&#x3D;heights.length;\n        minLeft[0]&#x3D;-1;\n        &#x2F;&#x2F;左数组，从0开始，在确定每一个柱子左边的第一根短柱子时都需要进行一次while循环。找到第一个小于柱子i的柱子下标，并赋值\n        for(int i&#x3D;0;i&lt;length;i++)&#123;\n            int t&#x3D;i-1;\n            while(t&gt;&#x3D;0&amp;&amp;heights[t]&gt;&#x3D;heights[i])&#123;\n                t&#x3D;minLeft[t];\n            &#125;\n            minLeft[i]&#x3D;t;\n        &#125;\n\n        &#x2F;&#x2F;右数组，从length-1开始，同左数组不断确定数组元素\n        minRight[length-1]&#x3D;length;\n        for(int i&#x3D;length-2;i&gt;&#x3D;0;i--)&#123;\n            int t&#x3D;i+1;\n            while(t&lt;length&amp;&amp;heights[t]&gt;&#x3D;heights[i])&#123;\n                t&#x3D;minRight[t];\n            &#125;\n            minRight[i]&#x3D;t;\n        &#125;\n\n        &#x2F;&#x2F;根据开头的公式，求得heights中的最大的矩形面积\n        int result&#x3D;0;\n        for(int i&#x3D;0;i&lt;length;i++)&#123;\n            int sum&#x3D;heights[i]*(minRight[i]-minLeft[i]-1);\n            result&#x3D;Math.max(sum,result);\n        &#125;\n        return result;\n\n    &#125;\n&#125;</code></pre>\n\n","text":"84.柱状图中最大的矩形题目描述： 柱状图中最大的矩形 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。 example 1: 输入：heights &#x3D; [2,1,5,6,2,3] ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2\"><span class=\"toc-text\">84.柱状图中最大的矩形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"01背包理论基础01","uid":"3a52c682a4c8facad241eff5c291da03","slug":"01背包理论基础01","date":"2023-01-30T04:38:37.000Z","updated":"2023-01-31T06:31:40.023Z","comments":true,"path":"api/articles/01背包理论基础01.json","keywords":null,"cover":null,"text":"01背包理论基础01题目描述：有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。 确定dp数组以及下标的含义 对于背包问题，有一种写法， 是使用二维数组，即...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":114,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"42.接雨水","uid":"dd718835733ef3d35103f48df96ec332","slug":"42-接雨水","date":"2023-01-25T03:29:06.000Z","updated":"2023-01-25T03:33:01.335Z","comments":true,"path":"api/articles/42-接雨水.json","keywords":null,"cover":null,"text":"题目描述： 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水 example1: 输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1] 输出：6 解释：上面是由数组 [0,1,0,2,1,0,...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":3,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":123,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":14,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}