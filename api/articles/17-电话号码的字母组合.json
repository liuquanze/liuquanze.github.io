{"title":"17.电话号码的字母组合","uid":"bd4de893333ca60e13361c93f6d4898d","slug":"17-电话号码的字母组合","date":"2022-10-28T15:38:55.000Z","updated":"2022-10-28T15:43:41.191Z","comments":true,"path":"api/articles/17-电话号码的字母组合.json","keywords":null,"cover":null,"content":"<h1 id=\"17-电话号码的字母组合\"><a href=\"#17-电话号码的字母组合\" class=\"headerlink\" title=\"17.电话号码的字母组合\"></a>17.电话号码的字母组合</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"17\">\n<li>电话号码的字母组合</li>\n</ol>\n<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：digits &#x3D; &quot;23&quot;\n输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：digits &#x3D; &quot;&quot;\n输出：[]</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：digits &#x3D; &quot;2&quot;\n输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n<li><code>digits[i]</code> 是范围 <code>[&#39;2&#39;, &#39;9&#39;]</code> 的一个数字。</li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/\">https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n\n    &#x2F;&#x2F;设置全局列表存储最后的结果\n    List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();\n\n    public List&lt;String&gt; letterCombinations(String digits) &#123;\n        if (digits &#x3D;&#x3D; null || digits.length() &#x3D;&#x3D; 0) &#123;\n            return list;\n        &#125;\n        &#x2F;&#x2F;初始对应所有的数字，为了直接对应2-9，新增了两个无效的字符串&quot;&quot;\n        String[] numString &#x3D; &#123;&quot;&quot;, &quot;&quot;, &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;, &quot;pqrs&quot;, &quot;tuv&quot;, &quot;wxyz&quot;&#125;;\n        &#x2F;&#x2F;迭代处理，参数1：输入的数字；参数2：所有数字对应的字符串；参数3：当前选取字符的数字\n        backTracking(digits, numString, 0);\n        return list;\n\n    &#125;\n\n    &#x2F;&#x2F;每次迭代获取一个字符串，所以会设计大量的字符串拼接，所以这里选择更为高效的 StringBuild\n    StringBuilder temp &#x3D; new StringBuilder();\n\n    &#x2F;&#x2F;比如digits如果为&quot;23&quot;,num 为0，则str表示2对应的 abc\n    public void backTracking(String digits, String[] numString, int num) &#123;\n        &#x2F;&#x2F;遍历全部一次记录一次得到的字符串\n        if (num &#x3D;&#x3D; digits.length()) &#123;\n            list.add(temp.toString());\n            return;\n        &#125;\n        &#x2F;&#x2F;str 表示当前num对应的字符串\n        String str &#x3D; numString[digits.charAt(num) - &#39;0&#39;];\n        for (int i &#x3D; 0; i &lt; str.length(); i++) &#123;\n            temp.append(str.charAt(i));\n            &#x2F;&#x2F;c\n            backTracking(digits, numString, num + 1);\n            &#x2F;&#x2F;剔除末尾的继续尝试\n            temp.deleteCharAt(temp.length() - 1);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n","text":"17.电话号码的字母组合题目描述： 电话号码的字母组合 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 example 1： 输入：digits &#x3D; ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88\"><span class=\"toc-text\">17.电话号码的字母组合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"39.组合总和","uid":"053358390c8f453129938125fef59c98","slug":"39-组合总和","date":"2022-10-29T13:43:12.000Z","updated":"2022-10-29T13:45:36.737Z","comments":true,"path":"api/articles/39-组合总和.json","keywords":null,"cover":null,"text":"39.组合总和题目描述： 组合总和 给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。 candida...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"216.组合总和Ⅲ","uid":"16a3361e9df66c3302f57a7e8e439d54","slug":"216-组合总和Ⅲ","date":"2022-10-27T15:01:56.000Z","updated":"2022-10-27T15:04:35.192Z","comments":true,"path":"api/articles/216-组合总和Ⅲ.json","keywords":null,"cover":null,"text":"216.组合总和Ⅲ题目描述： 组合总和 III 找出所有相加之和为 n 的 k 个数的组合，且满足下列条件： 只使用数字1到9 每个数字 最多使用一次 返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。 example 1: 输入: k &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":9,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}