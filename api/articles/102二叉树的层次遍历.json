{"title":"102二叉树的层次遍历","uid":"833c2507cf941e2d538bb205a797d8ee","slug":"102二叉树的层次遍历","date":"2022-09-21T13:56:20.000Z","updated":"2022-09-21T13:58:43.623Z","comments":true,"path":"api/articles/102二叉树的层次遍历.json","keywords":null,"cover":null,"content":"<h1 id=\"102-二叉树的层次遍历\"><a href=\"#102-二叉树的层次遍历\" class=\"headerlink\" title=\"102.二叉树的层次遍历\"></a>102.二叉树的层次遍历</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"102\">\n<li>二叉树的层序遍历</li>\n</ol>\n<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [3,9,20,null,null,15,7]\n输出：[[3],[9,20],[15,7]]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [1]\n输出：[[1]]</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; []\n输出：[]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点数目在范围 <code>[0, 2000]</code> 内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\">https://leetcode.cn/problems/binary-tree-level-order-traversal/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;\n        &#x2F;&#x2F;若树为空，返回空列表\n        if(root&#x3D;&#x3D;null)  return new LinkedList();\n        Queue&lt;TreeNode&gt; queue&#x3D;new LinkedList&lt;&gt;();\n        List&lt;List&lt;Integer&gt;&gt; result&#x3D;new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;根节点入队\n        queue.offer(root);\n\n        &#x2F;&#x2F;每次遍历都将同一层次的所有节点出队，并将节点的左右孩子分别入队。\n        while(!queue.isEmpty())&#123;\n            &#x2F;&#x2F;记录队列长度，即该层节点个数\n            int level_size&#x3D;queue.size();\n            &#x2F;&#x2F;创建列表存储该层节点的值\n            List&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();\n            &#x2F;&#x2F;遍历该层所有节点，size就是用来确定该层的元素个数，将该层节点左右孩子依次入队\n            for(int i&#x3D;0;i&lt;level_size;i++)&#123;\n                TreeNode temp&#x3D;queue.poll();\n                list.add(temp.val);\n                if(temp.left!&#x3D;null) queue.offer(temp.left);\n                if(temp.right!&#x3D;null) queue.offer(temp.right);\n\n            &#125;\n            result.add(list);\n        &#125;\n        return result;\n    &#125;\n&#125;</code></pre>\n\n","feature":true,"text":"102.二叉树的层次遍历题目描述： 二叉树的层序遍历 给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。 example 1: 输入：root &#x3D; [3,9,20,null,null,15,7] 输出：[[3],[9,20...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":64,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":67,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":63,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":3,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">102.二叉树的层次遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"226.翻转二叉树","uid":"ef0dd3ab7debf38b3a6c2ed67270d73b","slug":"226-翻转二叉树","date":"2022-09-22T14:25:52.000Z","updated":"2022-09-22T14:31:11.456Z","comments":true,"path":"api/articles/226-翻转二叉树.json","keywords":null,"cover":null,"text":"226. 翻转二叉树题目描述：example 1: 4 | | 2 7 | | | | 1 3 6 9 4 | | 7 2 | | | | 9 6 3 1 输入：root &#x3D; [4,2,7,1,3,6,9] 输出：[4,7,2,9,6,3,1] example 2: 2...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":64,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":67,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":63,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":3,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"94-145-144-二叉树的中后前序遍历-迭代法","uid":"c8b3d710ba9b825096c6638c8fc52d7d","slug":"94-145-144-二叉树的中后前序遍历-迭代法","date":"2022-09-20T12:40:17.000Z","updated":"2022-09-20T12:43:37.992Z","comments":true,"path":"api/articles/94-145-144-二叉树的中后前序遍历-迭代法.json","keywords":null,"cover":null,"text":"94&amp;145&amp;144.二叉树的中后前序遍历题目描述[中]： 二叉树的中序遍历 给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。 example 1: 输入：root &#x3D; [1,null,2,3] 输出：[1,3,2] example 2: ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true}}