{"title":"714.买卖股票的最佳时机含手续费","uid":"4d703d6dd28c31c1b1d5c0868f9f4887","slug":"714-买卖股票的最佳时机含手续费","date":"2022-12-25T13:42:08.000Z","updated":"2022-12-25T13:44:28.059Z","comments":true,"path":"api/articles/714-买卖股票的最佳时机含手续费.json","keywords":null,"cover":null,"content":"<h1 id=\"714-买卖股票的最佳时机含手续费\"><a href=\"#714-买卖股票的最佳时机含手续费\" class=\"headerlink\" title=\"714.买卖股票的最佳时机含手续费\"></a>714.买卖股票的最佳时机含手续费</h1><h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><ol start=\"714\">\n<li>买卖股票的最佳时机含手续费</li>\n</ol>\n<p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p>\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n<p>返回获得利润的最大值。</p>\n<p><strong>注意：</strong>这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：prices &#x3D; [1, 3, 2, 8, 4, 9], fee &#x3D; 2\n输出：8\n解释：能够达到的最大利润:  \n在此处买入 prices[0] &#x3D; 1\n在此处卖出 prices[3] &#x3D; 8\n在此处买入 prices[4] &#x3D; 4\n在此处卖出 prices[5] &#x3D; 9\n总利润: ((8 - 1) - 2) + ((9 - 4) - 2) &#x3D; 8</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：prices &#x3D; [1,3,7,5,10,3], fee &#x3D; 3\n输出：6</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= prices.length &lt;= 5 * 104</code></li>\n<li><code>1 &lt;= prices[i] &lt; 5 * 104</code></li>\n<li><code>0 &lt;= fee &lt; 5 * 104</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/\">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int maxProfit(int[] prices, int fee) &#123;\n        int result&#x3D;0;\n        int minPrice&#x3D;prices[0]; &#x2F;&#x2F;记录最低价格\n        for(int i&#x3D;1;i&lt;prices.length;i++)&#123;\n            &#x2F;&#x2F;记录股票最小价格\n            if(prices[i]&lt;minPrice) minPrice&#x3D;prices[i];\n\n            &#x2F;&#x2F;如果当前遍历到的股票价格无法获得收益,就不更新\n            if(prices[i]&gt;&#x3D;minPrice&amp;&amp;prices[i]&lt;&#x3D;minPrice+fee)&#123;\n                continue;\n            &#125;\n            &#x2F;&#x2F;计算利润，注意，这里获得利润不一定是直接将股票卖出了\n            if(prices[i]&gt;minPrice+fee)&#123;\n                result+&#x3D;prices[i]-minPrice-fee;\n                &#x2F;&#x2F;收获利润的这一天并不是收获利润区间里的最后一天（不是真正的卖出，相当于持有股票），所以后面要继续收获利润。\n                minPrice&#x3D;prices[i]-fee;\n            &#125;\n\n        &#125;\n        return result;\n    &#125;\n&#125;</code></pre>\n\n","text":"714.买卖股票的最佳时机含手续费问题描述： 买卖股票的最佳时机含手续费 给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":113,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":122,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9\"><span class=\"toc-text\">714.买卖股票的最佳时机含手续费</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">问题描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"968.监控二叉树","uid":"5898b23515666bc1eaf955d4bf31da9d","slug":"968-监控二叉树","date":"2022-12-27T13:07:30.000Z","updated":"2022-12-27T13:10:31.240Z","comments":true,"path":"api/articles/968-监控二叉树.json","keywords":null,"cover":null,"text":"968.监控二叉树1.问题描述： 监控二叉树 给定一个二叉树，我们在树的节点上安装摄像头。 节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。 计算监控树的所有节点所需的最小摄像头数量。 example 1: 输入：[0,0,null,0,0] 输出：1 解释：如图所示，...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":113,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":122,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":115,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"738-单调递增数字","date":"2022-12-24T13:33:47.363Z","updated":"2022-12-24T13:36:31.314Z","comments":true,"path":"api/articles/738-单调递增数字.json","keywords":null,"cover":null,"text":" title: 738.单调递增数字date: 2022-12-24 21:33:47categories: 数据结构与算法tags: Java leetcode 贪心算法 738.单调递增数字题目描述： 单调递增的数字 当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}