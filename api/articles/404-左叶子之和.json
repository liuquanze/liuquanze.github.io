{"title":"404.左叶子之和","uid":"4d298bda0eb98905fab53c1b930a261c","slug":"404-左叶子之和","date":"2022-09-30T14:44:06.000Z","updated":"2022-09-30T14:46:08.856Z","comments":true,"path":"api/articles/404-左叶子之和.json","keywords":null,"cover":null,"content":"<h1 id=\"404-左叶子之和\"><a href=\"#404-左叶子之和\" class=\"headerlink\" title=\"404.左叶子之和\"></a>404.左叶子之和</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"404\">\n<li>左叶子之和</li>\n</ol>\n<p>给定二叉树的根节点 <code>root</code> ，返回所有左叶子之和。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: root &#x3D; [3,9,20,null,null,15,7] \n输出: 24 \n解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: root &#x3D; [1]\n输出: 0</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>节点数在 <code>[1, 1000]</code> 范围内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/sum-of-left-leaves\">https://leetcode.cn/problems/sum-of-left-leaves</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public int sumOfLeftLeaves(TreeNode root) &#123;\n        &#x2F;&#x2F;若当前节点为空，则返回0\n        if(root&#x3D;&#x3D;null)\n            return 0;\n        &#x2F;&#x2F;若当前节点为叶子节点，则返回0\n        if(root.left&#x3D;&#x3D;null&amp;&amp;root.right&#x3D;&#x3D;null)\n            return 0;\n        &#x2F;&#x2F;记录左子树的所有叶子节点的值\n        int leftValue&#x3D;0;\n        &#x2F;&#x2F;如果左孩子节点就是叶子节点，则leftValue就是左孩子节点的值\n        if(root.left!&#x3D;null&amp;&amp;root.left.left&#x3D;&#x3D;null&amp;&amp;root.left.right&#x3D;&#x3D;null)\n            leftValue&#x3D;root.left.val;\n        &#x2F;&#x2F;返回当前节点左子树和右子树的所有左叶子节点的值之和\n        return leftValue+sumOfLeftLeaves(root.left)+sumOfLeftLeaves(root.right);\n    &#125;\n&#125;</code></pre>\n\n","text":"404.左叶子之和题目描述： 左叶子之和 给定二叉树的根节点 root ，返回所有左叶子之和。 example 1： 输入: root &#x3D; [3,9,20,null,null,15,7] 输出: 24 解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":105,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":111,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":105,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#404-%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">404.左叶子之和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"513.找树左下角的值","uid":"806f699ee80a6615fc5f8fc6dcffa078","slug":"513-找树左下角的值","date":"2022-09-30T15:03:56.000Z","updated":"2022-09-30T15:05:53.916Z","comments":true,"path":"api/articles/513-找树左下角的值.json","keywords":null,"cover":null,"text":"513.找树左下角的值题目描述： 找树左下角的值 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 example 1： 输入: root &#x3D; [2,1,3] 输出: 1 example 2: 输入: [1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":105,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":111,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":105,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"257.二叉树的所有路径","uid":"6c742a50ccef56ef00338cd62d89869a","slug":"257-二叉树的所有路径","date":"2022-09-29T13:48:25.000Z","updated":"2022-09-29T13:50:28.151Z","comments":true,"path":"api/articles/257-二叉树的所有路径.json","keywords":null,"cover":null,"text":"257.二叉树的所有路径题目描述： 二叉树的所有路径 给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。 叶子节点 是指没有子节点的节点。 example 1: 输入：root &#x3D; [1,2,3,null,5] 输出：[&quot;1...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":105,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":111,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":105,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}