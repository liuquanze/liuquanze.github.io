{"title":"617.合并二叉树","uid":"df36dac409def39859c6c978ff85b201","slug":"617-合并二叉树","date":"2022-10-05T01:34:50.000Z","updated":"2022-10-05T01:37:39.793Z","comments":true,"path":"api/articles/617-合并二叉树.json","keywords":null,"cover":null,"content":"<h1 id=\"617-合并二叉树\"><a href=\"#617-合并二叉树\" class=\"headerlink\" title=\"617.合并二叉树\"></a>617.合并二叉树</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"617\">\n<li>合并二叉树</li>\n</ol>\n<p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root1 &#x3D; [1,3,2,5], root2 &#x3D; [2,1,3,null,4,null,7]\n输出：[3,4,5,5,4,null,7]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root1 &#x3D; [1], root2 &#x3D; [1,2]\n输出：[2,2]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>两棵树中的节点数目在范围 <code>[0, 2000]</code> 内</li>\n<li><code>-104 &lt;= Node.val &lt;= 104</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">https://leetcode.cn/problems/merge-two-binary-trees/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    public TreeNode buildTree(TreeNode node1,TreeNode node2)&#123;\n        if(node1&#x3D;&#x3D;null&amp;&amp;node2&#x3D;&#x3D;null)\n            return null;\n        TreeNode node;\n        if(node1&#x3D;&#x3D;null&amp;&amp;node2!&#x3D;null)&#123;\n            &#x2F;&#x2F;若node1为空，则构造出的树和node2相同，直接返回node2\n            return node2;\n        &#125;else if(node1!&#x3D;null&amp;&amp;node2&#x3D;&#x3D;null)&#123;\n            return node1;\n        &#125;else&#123;\n            node&#x3D;new TreeNode(node1.val+node2.val);\n        \n            node.left&#x3D;buildTree(node1.left,node2.left);\n            node.right&#x3D;buildTree(node1.right,node2.right);\n        &#125;\n        return node;\n    &#125;\n\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123;\n        return buildTree(root1,root2);\n    &#125;\n&#125;</code></pre>\n\n","feature":true,"text":"617.合并二叉树题目描述： 合并二叉树 给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":77,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":80,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":76,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":16,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">617.合并二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"700.二叉搜索树中的搜索","uid":"4e6e4747e1b3af852c2bcbf832cc15bd","slug":"700-二叉搜索树中的搜索","date":"2022-10-06T01:18:40.000Z","updated":"2022-10-06T01:20:43.541Z","comments":true,"path":"api/articles/700-二叉搜索树中的搜索.json","keywords":null,"cover":null,"text":"700.二叉搜索树中的搜索题目描述： 二叉搜索树中的搜索 给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 example 1： 输入：root...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":77,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":80,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":76,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":16,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"654.最大二叉树","uid":"de48b7aad10b18e063971ae0b35f5843","slug":"654-最大二叉树","date":"2022-10-04T01:34:03.000Z","updated":"2022-10-04T01:38:04.962Z","comments":true,"path":"api/articles/654-最大二叉树.json","keywords":null,"cover":null,"text":"654.最大二叉树题目描述： 最大二叉树 给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建: 创建一个根节点，其值为 nums 中的最大值。 递归地在最大值 左边 的 子数组前缀上 构建左子树。 递归地在最大值 右边 的 子数组后缀上 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":77,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":80,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":76,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":16,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true}}