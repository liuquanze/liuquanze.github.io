{"title":"最大子数组和","uid":"f6c56b941ed067956656bab8c3d0bb61","slug":"最大子数组和","date":"2022-08-02T01:22:15.000Z","updated":"2022-08-02T01:26:05.471Z","comments":true,"path":"api/articles/最大子数组和.json","keywords":null,"cover":null,"content":"<h1 id=\"最大子数组和\"><a href=\"#最大子数组和\" class=\"headerlink\" title=\"最大子数组和\"></a>最大子数组和</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"53\">\n<li>最大子数组和</li>\n</ol>\n<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p><strong>子数组</strong> 是数组中的一个连续部分。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [1]\n输出：1</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23</code></pre>\n\n<p>题目来源：<a href=\"https://leetcode.cn/problems/maximum-subarray/\">https://leetcode.cn/problems/maximum-subarray/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int maxSubArray(int[] nums) &#123;\n        &#x2F;*\n        贪心算法：从左到右跌倒，一个一个遍历，遇到sum&lt;0,则重置sum，，return记录每次出现的sum的值的最大值。\n        *&#x2F;\n        &#x2F;&#x2F;return的初始大小为整型数据的最小值，为了和sum进行比较时可以接受任意小的sum\n        int result&#x3D;Integer.MIN_VALUE;\n        int sum&#x3D;0;\n        for(int i&#x3D;0;i&lt;nums.length;i++)&#123;\n            &#x2F;&#x2F;加上当前的被遍历的元素\n            sum+&#x3D;nums[i];\n            &#x2F;&#x2F;和result维护的之前sum的最大值进行比较，更新sum最大值\n            result&#x3D;Math.max(result,sum);\n            &#x2F;&#x2F;若当前和小于0，则重置sum的值为0，重新开始找子序列\n            if(sum&lt;0)&#123;\n                sum&#x3D;0;\n            &#125;\n        &#125;\n        return result;\n    &#125;\n&#125;</code></pre>\n\n","text":"最大子数组和题目描述： 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部分。 example 1: 输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4] ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":34,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":36,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":33,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C\"><span class=\"toc-text\">最大子数组和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"划分字母区间","uid":"b3d8a41da3eeb7700876b944e097bd03","slug":"划分字母区间","date":"2022-08-03T02:16:17.000Z","updated":"2022-08-03T02:18:46.609Z","comments":true,"path":"api/articles/划分字母区间.json","keywords":null,"cover":null,"text":"763.划分字母区间题目描述：763. 划分字母区间字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。 example 1: 输入：S &#x3D; &quot;ababcbacadefegd...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":34,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":36,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":33,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"非递减数列","uid":"ec406ffdb14348b593a8eaccf18d5ae3","slug":"非递减数列","date":"2022-08-01T02:10:59.000Z","updated":"2022-08-01T02:13:53.891Z","comments":true,"path":"api/articles/非递减数列.json","keywords":null,"cover":null,"text":"非递减数列题目描述：665. 非递减数列难度中等681收藏分享切换为英文接收动态反馈 给你一个长度为 n 的整数数组 nums ，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。 我们是这样定义一个非递减数列的： 对于数组中任意的 i (0 &lt;= ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":34,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":36,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":33,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}