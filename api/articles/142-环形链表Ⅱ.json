{"title":"142.环形链表Ⅱ","uid":"3775c9e904a11de6ad41f14528d2779f","slug":"142-环形链表Ⅱ","date":"2022-08-27T12:12:23.000Z","updated":"2022-08-27T12:18:55.647Z","comments":true,"path":"api/articles/142-环形链表Ⅱ.json","keywords":null,"cover":null,"content":"<h1 id=\"142-环形链表Ⅱ\"><a href=\"#142-环形链表Ⅱ\" class=\"headerlink\" title=\"142.环形链表Ⅱ\"></a>142.环形链表Ⅱ</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"142\">\n<li>环形链表 II</li>\n</ol>\n<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p><strong>不允许修改</strong> 链表。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; [1,2], pos &#x3D; 0\n输出：返回索引为 0 的链表节点\n解释：链表中有一个环，其尾部连接到第一个节点。</code></pre>\n\n<p>example 3:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：head &#x3D; [1], pos &#x3D; -1\n输出：返回 null\n解释：链表中没有环。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/submissions/\">https://leetcode.cn/problems/linked-list-cycle-ii/submissions/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n判断是否有环：可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。\n此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。\n首先判断是否有环，如果有环，则记录相遇节点，然后下一步寻找环的入口节点：从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点。\n*&#x2F;\n&#x2F;**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val &#x3D; x;\n *         next &#x3D; null;\n *     &#125;\n * &#125;\n *&#x2F;\npublic class Solution &#123;\n    public ListNode detectCycle(ListNode head) &#123;\n        ListNode slow &#x3D; head;\n        ListNode fast &#x3D; head;\n        while (fast !&#x3D; null &amp;&amp; fast.next !&#x3D; null) &#123;\n            slow &#x3D; slow.next;\n            fast &#x3D; fast.next.next;\n            if (slow &#x3D;&#x3D; fast) &#123;&#x2F;&#x2F; 有环\n                ListNode index1 &#x3D; fast;\n                ListNode index2 &#x3D; head;\n                &#x2F;&#x2F; 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口\n                while (index1 !&#x3D; index2) &#123;\n                    index1 &#x3D; index1.next;\n                    index2 &#x3D; index2.next;\n                &#125;\n                return index1;\n            &#125;\n        &#125;\n        return null;\n    &#125;\n&#125;</code></pre>\n\n","text":"142.环形链表Ⅱ题目描述： 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":71,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":74,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":70,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E2%85%A1\"><span class=\"toc-text\">142.环形链表Ⅱ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"242.有效的字母异位词","uid":"4b837d23486a4c7408641cab9ca86e52","slug":"242-有效的字母异位词","date":"2022-08-28T13:00:21.000Z","updated":"2022-08-28T13:05:14.925Z","comments":true,"path":"api/articles/242-有效的字母异位词.json","keywords":null,"cover":null,"text":"242.有效的字母异位词题目描述： 有效的字母异位词 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 注意：若 *s* 和 *t* 中每个字符出现的次数都相同，则称 *s* 和 *t* 互为字母异位词。 example 1： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":71,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":74,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":70,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"24.两两交换链表中的节点","uid":"997023f756e83c602ad393bfa331d66a","slug":"24-两两交换链表中的节点","date":"2022-08-24T14:35:56.000Z","updated":"2022-08-24T14:47:27.759Z","comments":true,"path":"api/articles/24-两两交换链表中的节点.json","keywords":null,"cover":null,"text":"24.两两交换链表中的节点题目描述： 两两交换链表中的节点 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 example1: 输入：head &#x3D; [1,2,3,4] 输出：[2,1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":71,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":74,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":70,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}