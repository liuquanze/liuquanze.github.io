{"title":"为运算表达式设计优先级","uid":"a2d24fc395bf8cf342e3b277c21f191b","slug":"为运算表达式设计优先级","date":"2022-08-12T02:29:37.000Z","updated":"2022-08-12T02:34:59.010Z","comments":true,"path":"api/articles/为运算表达式设计优先级.json","keywords":null,"cover":null,"content":"<h1 id=\"241-为运算表达式设计优先级\"><a href=\"#241-为运算表达式设计优先级\" class=\"headerlink\" title=\"241.为运算表达式设计优先级\"></a>241.为运算表达式设计优先级</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"241\">\n<li>为运算表达式设计优先级</li>\n</ol>\n<p>给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。</p>\n<p>生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果的数量不超过 104 。</p>\n<p>example1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：expression &#x3D; &quot;2-1-1&quot;\n输出：[0,2]\n解释：\n((2-1)-1) &#x3D; 0 \n(2-(1-1)) &#x3D; 2</code></pre>\n\n<p>example2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：expression &#x3D; &quot;2*3-4*5&quot;\n输出：[-34,-14,-10,-10,10]\n解释：\n(2*(3-(4*5))) &#x3D; -34 \n((2*3)-(4*5)) &#x3D; -14 \n((2*(3-4))*5) &#x3D; -10 \n(2*((3-4)*5)) &#x3D; -10 \n(((2*3)-4)*5) &#x3D; 10</code></pre>\n\n<p>提示：</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; expression.length &lt;&#x3D; 20<br>expression 由数字和算符 ‘+’、’-‘ 和 ‘*’ 组成。<br>输入表达式中的所有整数值在范围 [0, 99] </p>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/different-ways-to-add-parentheses\">https://leetcode.cn/problems/different-ways-to-add-parentheses</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    char[] cs;\n    public List&lt;Integer&gt; diffWaysToCompute(String s) &#123;\n        &#x2F;&#x2F;转化为字符数组\n        char[] chars&#x3D;s.toCharArray();\n        &#x2F;&#x2F;调用递归函数，初始边界是0~s.length()-1\n        return dfs(chars,0,chars.length-1);\n    &#125;\n\n    public List&lt;Integer&gt; dfs(char[] chars,int left,int right)&#123;\n        &#x2F;&#x2F;创建返回值列表\n        List&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;循环遍历每一个字符\n        for(int i&#x3D;left;i&lt;&#x3D;right;i++)&#123;\n            &#x2F;&#x2F;若为数字字符，则跳过\n            if(chars[i]&lt;&#x3D;&#39;9&#39;&amp;&amp;chars[i]&gt;&#x3D;&#39;0&#39;)\n                continue;\n            &#x2F;&#x2F;若为运算符字符，则递归左边的所有运算结果和右边的所有运算结果\n            List&lt;Integer&gt; left_ret&#x3D;dfs(chars,left,i-1);\n            List&lt;Integer&gt; right_ret&#x3D;dfs(chars,i+1,right);\n            &#x2F;&#x2F;遍历左边所有的运算结果和右边所有的运算结果，根据当前遇到的运算符进行相应的运算\n            for(int a:left_ret)&#123;\n                for(int b:right_ret)&#123;\n                    if(chars[i]&#x3D;&#x3D;&#39;+&#39;)&#123;\n                        list.add(a+b);\n                    &#125;else if(chars[i]&#x3D;&#x3D;&#39;-&#39;)&#123;\n                        list.add(a-b);\n                    &#125;else if(chars[i]&#x3D;&#x3D;&#39;*&#39;)&#123;\n                        list.add(a*b);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;若list为空，则表示全部为数字字符，则将数字字符加入到list中\n        if(list.isEmpty())&#123;\n            int ret&#x3D;0;\n            for(int i&#x3D;left;i&lt;&#x3D;right;i++)&#123;\n                ret&#x3D;ret*10+(chars[i]-&#39;0&#39;);\n            &#125;\n            list.add(ret);\n        &#125;\n        return list;\n    &#125;\n\n&#125;</code></pre>\n\n","text":"241.为运算表达式设计优先级题目描述： 为运算表达式设计优先级 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。 生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":43,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":45,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":41,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#241-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">241.为运算表达式设计优先级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"不同的二叉搜索树Ⅱ","uid":"3a8637d28c1ed4973b1acb4bbd24e5f2","slug":"不同的二叉搜索树Ⅱ","date":"2022-08-12T02:59:34.000Z","updated":"2022-08-12T03:02:09.663Z","comments":true,"path":"api/articles/不同的二叉搜索树Ⅱ.json","keywords":null,"cover":null,"text":"95.不同的二叉搜索树Ⅱ题目描述： 不同的二叉搜索树 II 给你一个整数 n ，请你生成并返回所有由 n 个节点组成且节点值从 1 到 n 互不相同的不同 二叉搜索树 。可以按 任意顺序 返回答案。 example 1: 输入：n &#x3D; 3 输出：[[1,null,2,n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":43,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":45,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":41,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"寻找旋转排序数组中的最小值","uid":"8d8d1a0d9f17dbec885c291446cece5c","slug":"寻找旋转排序数组中的最小值","date":"2022-08-08T03:56:07.000Z","updated":"2022-08-08T03:59:15.533Z","comments":true,"path":"api/articles/寻找旋转排序数组中的最小值.json","keywords":null,"cover":null,"text":"153.寻找旋转排序数组中的最小值题目描述：153. 寻找旋转排序数组中的最小值已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":43,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":45,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":41,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}