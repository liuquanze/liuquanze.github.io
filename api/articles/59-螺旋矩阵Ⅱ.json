{"title":"59.螺旋矩阵Ⅱ","uid":"fb852bf52649b6773513d798310ccbeb","slug":"59-螺旋矩阵Ⅱ","date":"2022-08-19T12:59:09.000Z","updated":"2022-08-19T13:01:10.824Z","comments":true,"path":"api/articles/59-螺旋矩阵Ⅱ.json","keywords":null,"cover":null,"content":"<h1 id=\"59-螺旋矩阵Ⅱ\"><a href=\"#59-螺旋矩阵Ⅱ\" class=\"headerlink\" title=\"59.螺旋矩阵Ⅱ\"></a>59.螺旋矩阵Ⅱ</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"59\">\n<li>螺旋矩阵 II</li>\n</ol>\n<p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：n &#x3D; 3\n输出：[[1,2,3],[8,9,4],[7,6,5]]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：n &#x3D; 1\n输出：[[1]]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">https://leetcode.cn/problems/spiral-matrix-ii/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int[][] generateMatrix(int n) &#123;\n        int[][] ret&#x3D;new int[n][n];\n        int offset&#x3D;1;   &#x2F;&#x2F;每轮循环需要偏移的量，比如第一轮是要预留一个位置，offset&#x3D;1\n        int loop&#x3D;n&#x2F;2;   &#x2F;&#x2F;需要进行的圈数，比如n&#x3D;3只需要循环一次，n&#x3D;6需要循环3次\n        int mid&#x3D;n&#x2F;2;    &#x2F;&#x2F;矩阵的中心位置，比如n&#x3D;3，中心位置是(1,1)\n        int count&#x3D;1;    &#x2F;&#x2F;用于给各个位置赋值\n        int i&#x3D;0;\n        int j&#x3D;0;\n        int startx&#x3D;0;\n        int starty&#x3D;0;       &#x2F;&#x2F;用于记录每一圈的开始位置\n        for(;loop&gt;0;loop--)&#123;\n            i&#x3D;startx;\n            j&#x3D;starty;\n            &#x2F;&#x2F;从左向右移动，j小于n-offset，预留一个位置给后面            \n            for(;j&lt;n-offset;j++)&#123;\n                ret[i][j]&#x3D;count++;\n            &#125;\n            &#x2F;&#x2F;从上向下移动，预留一个位置给后面\n            for(;i&lt;n-offset;i++)&#123;\n                ret[i][j]&#x3D;count++;\n            &#125;\n            &#x2F;&#x2F;从右向左移动，预留一个位置给后面，注意这里j不是大于0，而是大于starty，因为每一圈的开始位置是在改变的，只有第一圈才是0\n            for(;j&gt;starty;j--)&#123;\n                ret[i][j]&#x3D;count++;\n            &#125;\n            &#x2F;&#x2F;从下向上移动，预留一个位置给后面，注意这里i不是大于0，而是大于startx，因为每一圈的开始位置是在移动的，只有第一圈才是0\n            for(;i&gt;startx;i--)&#123;\n                ret[i][j]&#x3D;count++;\n            &#125;\n            &#x2F;&#x2F;更新便宜量，因为每一圈是在不断缩小的，所以边界是在变化的，所以偏移量也在变化\n            offset++;\n            &#x2F;&#x2F;更新下一圈的开始位置\n            startx++;\n            starty++;\n\n\n        &#125;\n        &#x2F;&#x2F;若n为奇数，则中心会有一个多出的元素，需要进行赋值，其实就是最后一个元素n^2\n        if(n%2&#x3D;&#x3D;1)&#123;\n            ret[mid][mid]&#x3D;n*n;\n        &#125;\n        return ret;\n    &#125;\n&#125;</code></pre>\n\n","text":"59.螺旋矩阵Ⅱ题目描述： 螺旋矩阵 II 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 example 1: 输入：n &#x3D; 3 输出：[[1,2,3],[8,9,4],[7,6,5]...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":75,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":78,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":74,"path":"api/tags/leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E2%85%A1\"><span class=\"toc-text\">59.螺旋矩阵Ⅱ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"416.分割等和子集","uid":"be7f5c6dc71f9de739df383de800893c","slug":"416-分割等和子集","date":"2022-08-20T01:04:47.000Z","updated":"2022-08-20T01:11:13.233Z","comments":true,"path":"api/articles/416-分割等和子集.json","keywords":null,"cover":null,"text":"416.分割等和子集题目描述： 分割等和子集 给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。 example 1: 输入：nums &#x3D; [1,5,11,5] 输出：true 解释：数组可以分割成 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":75,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":78,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":74,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"209.长度最小的子数组","uid":"3e8eaaf0906092af7ecd3983c1cdcff1","slug":"209-长度最小的子数组","date":"2022-08-19T12:21:28.000Z","updated":"2022-08-19T12:24:53.929Z","comments":true,"path":"api/articles/209-长度最小的子数组.json","keywords":null,"cover":null,"text":"209.长度最小的子数组题目描述： 长度最小的子数组 给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":75,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":78,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":74,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}