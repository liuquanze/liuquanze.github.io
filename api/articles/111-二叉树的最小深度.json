{"title":"111.二叉树的最小深度","uid":"5e70057312954f6211ec72bb65eb479c","slug":"111-二叉树的最小深度","date":"2022-09-24T14:45:07.000Z","updated":"2022-09-24T14:55:20.004Z","comments":true,"path":"api/articles/111-二叉树的最小深度.json","keywords":null,"cover":null,"content":"<h1 id=\"111-二叉树的最小深度\"><a href=\"#111-二叉树的最小深度\" class=\"headerlink\" title=\"111.二叉树的最小深度\"></a>111.二叉树的最小深度</h1><h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><ol start=\"111\">\n<li>二叉树的最小深度</li>\n</ol>\n<p>给定一个二叉树，找出其最小深度。</p>\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [3,9,20,null,null,15,7]\n输出：2</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [2,null,3,null,4,null,5,null,6]\n输出：5</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点数的范围在 <code>[0, 105]</code> 内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">https://leetcode.cn/problems/minimum-depth-of-binary-tree/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    &#x2F;**\n    层序遍历，和最大深度不同，最大深度是记录二叉树拥有的层次，而最小深度，是寻找距离根节点最近的叶子节点，即层序遍历遇到的第一个叶子节点（没有左孩子和右孩子的节点）。\n    \n     *&#x2F;\n    public int minDepth(TreeNode root) &#123;\n        \n        if(root&#x3D;&#x3D;null)\n            return 0;\n        Queue&lt;TreeNode&gt; queue&#x3D;new LinkedList&lt;&gt;();\n        int deep&#x3D;0;\n        queue.offer(root);\n        while(!queue.isEmpty())&#123;\n            int size&#x3D;queue.size();\n            deep++;\n            for(int i&#x3D;0;i&lt;size;i++)&#123;\n                TreeNode temp&#x3D;queue.poll();\n                if(temp.left&#x3D;&#x3D;null&amp;&amp;temp.right&#x3D;&#x3D;null)&#123;\n                    return deep;\n                &#125;\n                if(temp.left!&#x3D;null)&#123;\n                    queue.offer(temp.left);\n                &#125;\n                if(temp.right!&#x3D;null) &#123;\n                    queue.offer(temp.right);\n                &#125;\n\n            &#125;\n        &#125;\n        return deep;\n\n    &#125;\n&#125;\n</code></pre>\n\n","text":"111.二叉树的最小深度问题描述： 二叉树的最小深度 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的节点。 example 1: 输入：root &#x3D; [3,9,20,null,null,15,7...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":99,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":104,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":98,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6\"><span class=\"toc-text\">111.二叉树的最小深度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">问题描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"222.完全二叉树的节点个数","uid":"576c683ca9399adeb9bce96faa97dac2","slug":"222-完全二叉树的节点个数","date":"2022-09-25T14:17:21.000Z","updated":"2022-09-25T14:21:06.711Z","comments":true,"path":"api/articles/222-完全二叉树的节点个数.json","keywords":null,"cover":null,"text":"222.完全二叉树的节点个数题目描述： 完全二叉树的节点个数 给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。 完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":99,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":104,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":98,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"101.对称二叉树","uid":"0db04708e016f3790cc78724de1cd91e","slug":"101-对称二叉树","date":"2022-09-23T13:05:24.000Z","updated":"2022-09-23T13:09:25.288Z","comments":true,"path":"api/articles/101-对称二叉树.json","keywords":null,"cover":null,"text":"101.对称二叉树题目描述：example 1： 1 | | 2 2 | | | | 3 4 4 3 输入：root &#x3D; [1,2,2,3,4,4,3] 输出：true example 2: 1 | | 2 2 | | 3 3 输入：root &#x3D; [1,2,2...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":99,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":104,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":98,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}