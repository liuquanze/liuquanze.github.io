{"title":"654.最大二叉树","uid":"de48b7aad10b18e063971ae0b35f5843","slug":"654-最大二叉树","date":"2022-10-04T01:34:03.000Z","updated":"2022-10-04T01:38:04.962Z","comments":true,"path":"api/articles/654-最大二叉树.json","keywords":null,"cover":null,"content":"<h1 id=\"654-最大二叉树\"><a href=\"#654-最大二叉树\" class=\"headerlink\" title=\"654.最大二叉树\"></a>654.最大二叉树</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"654\">\n<li>最大二叉树</li>\n</ol>\n<p>给定一个不重复的整数数组 <code>nums</code> 。 <strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code> 递归地构建:</p>\n<ol>\n<li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li>\n<li>递归地在最大值 <strong>左边</strong> 的 <strong>子数组前缀上</strong> 构建左子树。</li>\n<li>递归地在最大值 <strong>右边</strong> 的 <strong>子数组后缀上</strong> 构建右子树。</li>\n</ol>\n<p>返回 <em><code>nums</code> 构建的</em> *<strong>最大二叉树*</strong> 。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [3,2,1,6,0,5]\n输出：[6,3,5,null,2,0,null,null,1]\n解释：递归调用如下所示：\n- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。\n    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。\n        - 空数组，无子节点。\n        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。\n            - 空数组，无子节点。\n            - 只有一个元素，所以子节点是一个值为 1 的节点。\n    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。\n        - 只有一个元素，所以子节点是一个值为 0 的节点。\n        - 空数组，无子节点。</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：nums &#x3D; [3,2,1]\n输出：[3,null,2,null,1]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n<li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/maximum-binary-tree\">https://leetcode.cn/problems/maximum-binary-tree</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    &#x2F;&#x2F;递归函数\n    public TreeNode buildTree(int[] nums,int start,int end)&#123;\n        &#x2F;&#x2F;若超出范围，则表示没有节点，则返回null\n        if(start&gt;&#x3D;end)&#123;\n            return null;\n        &#125;\n        &#x2F;&#x2F;循环找出当前数组范围内的最大值及其下标\n        int max&#x3D;-1;\n        int index_max&#x3D;-1;\n        for(int i&#x3D;start;i&lt;end;i++)&#123;\n            if(nums[i]&gt;max)&#123;\n                max&#x3D;nums[i];\n                index_max&#x3D;i;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;构造节点\n        TreeNode node&#x3D;new TreeNode(max);\n        &#x2F;&#x2F;递归构造左子树，注意传入的区间参数，左闭右开\n        node.left&#x3D;buildTree(nums,start,index_max);\n        &#x2F;&#x2F;左闭右开\n        node.right&#x3D;buildTree(nums,index_max+1,end);\n        return node;\n    &#125;\n\n    public TreeNode constructMaximumBinaryTree(int[] nums) &#123;\n        if(nums&#x3D;&#x3D;null)\n            return null;\n        &#x2F;&#x2F;左闭右开\n        return buildTree(nums,0,nums.length);\n    &#125;\n&#125;</code></pre>\n\n","text":"654.最大二叉树题目描述： 最大二叉树 给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建: 创建一个根节点，其值为 nums 中的最大值。 递归地在最大值 左边 的 子数组前缀上 构建左子树。 递归地在最大值 右边 的 子数组后缀上 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":101,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":106,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":100,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">654.最大二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"617.合并二叉树","uid":"df36dac409def39859c6c978ff85b201","slug":"617-合并二叉树","date":"2022-10-05T01:34:50.000Z","updated":"2022-10-05T01:37:39.793Z","comments":true,"path":"api/articles/617-合并二叉树.json","keywords":null,"cover":null,"text":"617.合并二叉树题目描述： 合并二叉树 给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":101,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":106,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":100,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"106. 从中序与后序遍历序列构造二叉树","uid":"1dd4eb0dc067f1daee6408ed548f50e5","slug":"106-从中序与后序遍历序列构造二叉树","date":"2022-10-03T12:53:13.000Z","updated":"2022-10-03T13:37:34.390Z","comments":true,"path":"api/articles/106-从中序与后序遍历序列构造二叉树.json","keywords":null,"cover":null,"text":"106.从中序与后序遍历序列构造二叉树题目描述： 从中序与后序遍历序列构造二叉树 给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。 example 1:...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":101,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":106,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":100,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}