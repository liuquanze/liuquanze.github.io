{"title":"501.二叉搜索树中的众数","uid":"4292498269ab452abce6e693ac1873b6","slug":"501-二叉搜索树中的众数","date":"2022-10-09T01:46:39.000Z","updated":"2022-10-09T01:48:34.411Z","comments":true,"path":"api/articles/501-二叉搜索树中的众数.json","keywords":null,"cover":null,"content":"<h1 id=\"501-二叉搜索树中的众数\"><a href=\"#501-二叉搜索树中的众数\" class=\"headerlink\" title=\"501.二叉搜索树中的众数\"></a>501.二叉搜索树中的众数</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"501\">\n<li>二叉搜索树中的众数</li>\n</ol>\n<p>给你一个含重复值的二叉搜索树（BST）的根节点 <code>root</code> ，找出并返回 BST 中的所有 <a href=\"https://baike.baidu.com/item/%E4%BC%97%E6%95%B0/44796\">众数</a>（即，出现频率最高的元素）。</p>\n<p>如果树中有不止一个众数，可以按 <strong>任意顺序</strong> 返回。</p>\n<p>假定 BST 满足如下定义：</p>\n<ul>\n<li>结点左子树中所含节点的值 <strong>小于等于</strong> 当前节点的值</li>\n<li>结点右子树中所含节点的值 <strong>大于等于</strong> 当前节点的值</li>\n<li>左子树和右子树都是二叉搜索树</li>\n</ul>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [1,null,2,2]\n输出：[2]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [0]\n输出：[0]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点的数目在范围 <code>[1, 104]</code> 内</li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/find-mode-in-binary-search-tree/\">https://leetcode.cn/problems/find-mode-in-binary-search-tree/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n    &#x2F;&#x2F;存储出现最大次数的元素有哪些\n    public List&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();\n    &#x2F;&#x2F;记录当前出现次数最多的元素的个数\n    public int maxCount&#x3D;0;\n    &#x2F;&#x2F;记录当前节点元素出现的次数\n    public int count&#x3D;0;\n    &#x2F;&#x2F;记录上一个节点\n    public TreeNode pre&#x3D;null;\n\n    public int[] findMode(TreeNode root) &#123;\n        findMode_1(root);\n        int[] res&#x3D;new int[list.size()];\n        for(int i&#x3D;0;i&lt;list.size();i++)&#123;\n            res[i]&#x3D;list.get(i);\n        &#125;\n        return res;\n    &#125;\n\n    &#x2F;&#x2F;进行中序遍历，并在遍历到该节点时更新当前元素的count，并检查是否需要更新maxCount，如果需要更新maxCount（当前元素Count大于maxCount）则将返回值列表中元素全部清除，若小于maxCount，则不进行更新，若等于maxCount，则将元素加入到resList，即返回列表中。\n    public void findMode_1(TreeNode node)&#123;\n        if(node&#x3D;&#x3D;null)\n            return ;\n        findMode_1(node.left);\n        if(pre&#x3D;&#x3D;null||pre.val!&#x3D;node.val)&#123;\n            count&#x3D;1;\n        &#125;else&#123;\n            count++;\n        &#125;\n        if(count&gt;maxCount)&#123;\n            maxCount&#x3D;count;\n            list.clear();\n            list.add(node.val);\n        &#125;else if(count&#x3D;&#x3D;maxCount)&#123;\n            list.add(node.val);\n        &#125;\n        pre&#x3D;node;\n        findMode_1(node.right);\n\n    &#125;\n&#125;</code></pre>\n\n","text":"501.二叉搜索树中的众数题目描述： 二叉搜索树中的众数 给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。 如果树中有不止一个众数，可以按 任意顺序 返回。 假定 BST 满足如下定义： 结点左子树中所含节...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":106,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":112,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":106,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#501-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0\"><span class=\"toc-text\">501.二叉搜索树中的众数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"236.二叉树的最近公共祖先","uid":"601c51b501c0367e52192a7f2085d7dc","slug":"236-二叉树的最近公共祖先","date":"2022-10-10T08:16:57.000Z","updated":"2022-10-10T08:19:39.138Z","comments":true,"path":"api/articles/236-二叉树的最近公共祖先.json","keywords":null,"cover":null,"text":"236.二叉树的最近公共祖先题目描述： 二叉树的最近公共祖先 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":106,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":112,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":106,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"530.二叉搜索树的最小绝对值差","uid":"6226c398b825b38b91ad0079c34b0472","slug":"530-二叉搜索树的最小绝对值差","date":"2022-10-08T01:03:59.000Z","updated":"2022-10-08T01:06:27.840Z","comments":true,"path":"api/articles/530-二叉搜索树的最小绝对值差.json","keywords":null,"cover":null,"text":"530.二叉搜索树的最小绝对值差题目描述： 二叉搜索树的最小绝对差 给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。 差值是一个正数，其数值等于两值之差的绝对值。 example 1： 输入：root &#x3D; [4,2,6,1,3] 输出...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":106,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":112,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":106,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}