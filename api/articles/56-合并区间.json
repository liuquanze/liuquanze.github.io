{"title":"56.合并区间","uid":"708bb9dc20508eae07ec4c15173c31e9","slug":"56-合并区间","date":"2022-12-23T14:03:17.000Z","updated":"2022-12-23T14:09:32.282Z","comments":true,"path":"api/articles/56-合并区间.json","keywords":null,"cover":null,"content":"<h1 id=\"56-合并区间\"><a href=\"#56-合并区间\" class=\"headerlink\" title=\"56.合并区间\"></a>56.合并区间</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：intervals &#x3D; [[1,3],[2,6],[8,10],[15,18]]\n输出：[[1,6],[8,10],[15,18]]\n解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：intervals &#x3D; [[1,4],[4,5]]\n输出：[[1,5]]\n解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= intervals.length &lt;= 104</code></li>\n<li><code>intervals[i].length == 2</code></li>\n<li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li>\n</ul>\n<p>题目来源：</p>\n<p><a href=\"https://leetcode.cn/problems/merge-intervals/\">https://leetcode.cn/problems/merge-intervals/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n    public int[][] merge(int[][] intervals) &#123;\n        List&lt;int[]&gt; result&#x3D;new LinkedList&lt;&gt;();\n        &#x2F;&#x2F;按照子数组的左边界进行排序\n        Arrays.sort(intervals, (x,y)-&gt;Integer.compare(x[0],y[0]));\n        &#x2F;&#x2F;初始化新子区间的左边界为第一个子区间的左边界\n        int start&#x3D;intervals[0][0];\n        &#x2F;&#x2F;初始化新子区间的最远边界为第一个子区间的右边界\n        int rightMaxBound&#x3D;intervals[0][1];\n        for(int i&#x3D;1;i&lt;intervals.length;i++)&#123;\n            &#x2F;&#x2F;如果当前子区间的左边界大于最大右边界，表示当前区间和前一个区间分割开了\n            if(intervals[i][0]&gt;rightMaxBound)&#123;\n                &#x2F;&#x2F;将上一个划分出来的区间加入到结果集合中\n                result.add(new int[]&#123;start,rightMaxBound&#125;);\n                start&#x3D;intervals[i][0];\n                rightMaxBound&#x3D;intervals[i][1];\n            &#125;else&#123;\n                &#x2F;&#x2F;如果这个遍历到的区间和之前遍历的区间是有重叠的，则更新最大右边界\n                rightMaxBound&#x3D;Math.max(rightMaxBound,intervals[i][1]);\n            &#125;\n        &#125;\n        result.add(new int[]&#123;start,rightMaxBound&#125;);\n        return result.toArray(new int[result.size()][]);\n    &#125;\n&#125;</code></pre>\n\n","text":"56.合并区间题目描述：以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。 example 1: 输入：inte...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":109,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":115,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":109,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#56-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4\"><span class=\"toc-text\">56.合并区间</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"738-单调递增数字","date":"2022-12-24T13:33:47.363Z","updated":"2022-12-24T13:36:31.314Z","comments":true,"path":"api/articles/738-单调递增数字.json","keywords":null,"cover":null,"text":" title: 738.单调递增数字date: 2022-12-24 21:33:47categories: 数据结构与算法tags: Java leetcode 贪心算法 738.单调递增数字题目描述： 单调递增的数字 当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"763-划分字母区间","date":"2022-12-22T03:39:57.494Z","updated":"2022-12-22T03:44:34.979Z","comments":true,"path":"api/articles/763-划分字母区间.json","keywords":null,"cover":null,"text":" title: 763.划分字母区间date: 2022-12-22 11:39:57categories: 数据结构与算法tags: Java leetcode 贪心算法 763.划分字母区间题目描述： 划分字母区间 给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}