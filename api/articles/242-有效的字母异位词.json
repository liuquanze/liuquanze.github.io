{"title":"242.有效的字母异位词","uid":"4b837d23486a4c7408641cab9ca86e52","slug":"242-有效的字母异位词","date":"2022-08-28T13:00:21.000Z","updated":"2022-08-28T13:05:14.925Z","comments":true,"path":"api/articles/242-有效的字母异位词.json","keywords":null,"cover":null,"content":"<h1 id=\"242-有效的字母异位词\"><a href=\"#242-有效的字母异位词\" class=\"headerlink\" title=\"242.有效的字母异位词\"></a>242.有效的字母异位词</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"242\">\n<li>有效的字母异位词</li>\n</ol>\n<p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p>\n<p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>\n<p>example 1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;\n输出: true</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;\n输出: false</code></pre>\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>\n<li><code>s</code> 和 <code>t</code> 仅包含小写字母</li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/valid-anagram/\">https://leetcode.cn/problems/valid-anagram/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n定义一个数组，来记录字符串s里字符出现的次数。\n需要把字符映射到数组也就是哈希表的索引下标上，因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。\n\n再遍历 字符串s的时候，只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。 这样就将字符串s中字符出现的次数，统计出来了。\n\n那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。\n\n那么最后检查一下，record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。\n\n最后如果record数组所有元素都为零0，说明字符串s和t是字母异位词，return true。\n\n时间复杂度为O(n)，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为O(1)。\n*&#x2F;\nclass Solution &#123;\n    public boolean isAnagram(String s, String t) &#123;\n\n        int[] record &#x3D; new int[26];\n        for (char c : s.toCharArray()) &#123;\n            record[c - &#39;a&#39;] +&#x3D; 1;\n        &#125;\n        for (char c : t.toCharArray()) &#123;\n            record[c - &#39;a&#39;] -&#x3D; 1;\n        &#125;\n        for (int i : record) &#123;\n            if (i !&#x3D; 0) &#123;\n                return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;</code></pre>\n\n","text":"242.有效的字母异位词题目描述： 有效的字母异位词 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 注意：若 *s* 和 *t* 中每个字符出现的次数都相同，则称 *s* 和 *t* 互为字母异位词。 example 1： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D\"><span class=\"toc-text\">242.有效的字母异位词</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"349.两个数组的交集","uid":"c18601503540d5650db70b6721599b9d","slug":"349-两个数组的交集","date":"2022-08-29T12:47:57.000Z","updated":"2022-08-29T12:50:21.782Z","comments":true,"path":"api/articles/349-两个数组的交集.json","keywords":null,"cover":null,"text":"349.两个数组的交集题目描述： 两个数组的交集 给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。 example 1: 输入：nums1 &#x3D; [1,2,2,1], nums2 &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},"next_post":{"title":"142.环形链表Ⅱ","uid":"3775c9e904a11de6ad41f14528d2779f","slug":"142-环形链表Ⅱ","date":"2022-08-27T12:12:23.000Z","updated":"2022-08-27T12:18:55.647Z","comments":true,"path":"api/articles/142-环形链表Ⅱ.json","keywords":null,"cover":null,"text":"142.环形链表Ⅱ题目描述： 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":103,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":109,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":103,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}}