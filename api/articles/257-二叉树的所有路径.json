{"title":"257.二叉树的所有路径","uid":"6c742a50ccef56ef00338cd62d89869a","slug":"257-二叉树的所有路径","date":"2022-09-29T13:48:25.000Z","updated":"2022-09-29T13:50:28.151Z","comments":true,"path":"api/articles/257-二叉树的所有路径.json","keywords":null,"cover":null,"content":"<h1 id=\"257-二叉树的所有路径\"><a href=\"#257-二叉树的所有路径\" class=\"headerlink\" title=\"257.二叉树的所有路径\"></a>257.二叉树的所有路径</h1><h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><ol start=\"257\">\n<li>二叉树的所有路径</li>\n</ol>\n<p>给你一个二叉树的根节点 <code>root</code> ，按 <strong>任意顺序</strong> ，返回所有从根节点到叶子节点的路径。</p>\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\n<p>example 1:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [1,2,3,null,5]\n输出：[&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]</code></pre>\n\n<p>example 2:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">输入：root &#x3D; [1]\n输出：[&quot;1&quot;]</code></pre>\n\n<p>提示：</p>\n<ul>\n<li>树中节点的数目在范围 <code>[1, 100]</code> 内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<p>题目来源：<a href=\"https://leetcode.cn/problems/binary-tree-paths/\">https://leetcode.cn/problems/binary-tree-paths/</a></p>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val &#x3D; val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val &#x3D; val;\n *         this.left &#x3D; left;\n *         this.right &#x3D; right;\n *     &#125;\n * &#125;\n *&#x2F;\nclass Solution &#123;\n\n    &#x2F;&#x2F;递归+回溯的方法\n    public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123;\n        &#x2F;&#x2F;创建结果列表，列表元素是字符串，字符串表示的是路径\n        List&lt;String&gt; result&#x3D;new ArrayList&lt;&gt;();\n        if(root&#x3D;&#x3D;null)\n            return result;\n        &#x2F;&#x2F;用于存储路径，列表元素是整型变量，变量表示的是每一个节点的值\n        List&lt;Integer&gt; paths&#x3D;new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;进行递归和回溯\n        traverse(root,paths,result);\n        &#x2F;&#x2F;返回搜索的路径结果\n        return result;\n    &#125;\n\n    public void traverse(TreeNode node,List&lt;Integer&gt; paths,List&lt;String&gt; result)&#123;\n        &#x2F;&#x2F;将该节点加入路径\n        paths.add(node.val);\n\n        &#x2F;&#x2F;判断是否为叶子节点，如果是叶子节点，则将paths列表转化为路径字符串，并加入到result中，并返回\n        if(node.left&#x3D;&#x3D;null&amp;&amp;node.right&#x3D;&#x3D;null)&#123;\n            StringBuffer temp&#x3D;new StringBuffer();\n            for(int i&#x3D;0;i&lt;paths.size()-1;i++)&#123;\n                temp.append(paths.get(i)).append(&quot;-&gt;&quot;);\n            &#125;\n            temp.append(paths.get(paths.size()-1));\n            result.add(temp.toString());\n            return;\n        &#125;\n        &#x2F;&#x2F;如果该节点存在左孩子，则将左孩子进行递归\n        &#x2F;&#x2F;注意，这里需要将paths列表的最后一个元素弹出，\n        &#x2F;&#x2F;若该元素的左孩子就是叶子节点，则paths最后一个元素就是左孩子节点，因为后续要继续寻找路径，所以这里的叶节点需要弹出。\n        if(node.left!&#x3D;null)&#123;\n            traverse(node.left,paths,result);\n            paths.remove(paths.size()-1);\n        &#125;\n        if(node.right!&#x3D;null)&#123;\n            traverse(node.right,paths,result);\n            paths.remove(paths.size()-1);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n","feature":true,"text":"257.二叉树的所有路径题目描述： 二叉树的所有路径 给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。 叶子节点 是指没有子节点的节点。 example 1: 输入：root &#x3D; [1,2,3,null,5] 输出：[&quot;1...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":69,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":72,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":68,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":8,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#257-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">257.二叉树的所有路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">题解：</span></a></li></ol></li></ol>","author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"110.平衡二叉树","uid":"21a7b5849c8515778a333234cc58b5b6","slug":"110-平衡二叉树","date":"2022-09-27T14:53:38.000Z","updated":"2022-09-27T14:56:16.541Z","comments":true,"path":"api/articles/110-平衡二叉树.json","keywords":null,"cover":null,"text":"110.平衡二叉树题目描述： 平衡二叉树 给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。 example 1: 输入：root &#x3D; [3,9,20,null,null,...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":69,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":72,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":68,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":8,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true}}