[{"title":"62.不同路径","uid":"c2410b2838d2b960665ad0be86344655","slug":"62-不同路径","date":"2023-01-16T14:31:26.000Z","updated":"2023-01-16T14:34:41.429Z","comments":true,"path":"api/articles/62-不同路径.json","cover":null,"text":"题目描述： 不同路径 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。 问总共有多少条不同的路径？ example 1: 输入：m &...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构和算法","slug":"数据结构和算法","count":1,"path":"api/categories/数据结构和算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":10,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"509.斐波那契数列","uid":"084b6d4a3eb1719c740e694cde17f8e9","slug":"509-斐波那契数列","date":"2023-01-06T09:13:18.000Z","updated":"2023-01-06T09:16:03.037Z","comments":true,"path":"api/articles/509-斐波那契数列.json","cover":null,"text":"509.斐波那契数列题目描述： 斐波那契数 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) &#x3D; 0，F(1) &#x3D; 1 F(n) &#x3D; F(n -...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":10,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"968.监控二叉树","uid":"5898b23515666bc1eaf955d4bf31da9d","slug":"968-监控二叉树","date":"2022-12-27T13:07:30.000Z","updated":"2022-12-27T13:10:31.240Z","comments":true,"path":"api/articles/968-监控二叉树.json","cover":null,"text":"968.监控二叉树1.问题描述： 监控二叉树 给定一个二叉树，我们在树的节点上安装摄像头。 节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。 计算监控树的所有节点所需的最小摄像头数量。 example 1: 输入：[0,0,null,0,0] 输出：1 解释：如图所示，...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":110,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":117,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":111,"path":"api/tags/leetcode.json"},{"name":"贪心算法","slug":"贪心算法","count":15,"path":"api/tags/贪心算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true}]