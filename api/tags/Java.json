{"name":"Java","slug":"Java","count":94,"postlist":[{"title":"01 bag","uid":"dcd5a30d05960c310201068cc050e1d7","slug":"01-bag","date":"2022-08-17T03:09:15.000Z","updated":"2022-08-17T03:11:51.217Z","comments":true,"path":"api/articles/01-bag.json","keywords":null,"cover":null,"text":"01背包问题题目描述：有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。 这样其实是没有从底向上去思考，而是习惯性想到了背包，那么暴力的解法应该是怎么样的呢...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"05.替换空格","uid":"e719937f6951d143569f327df963f42d","slug":"05-替换空格","date":"2022-09-05T14:29:42.000Z","updated":"2022-09-05T14:35:56.634Z","comments":true,"path":"api/articles/05-替换空格.json","keywords":null,"cover":null,"text":"05.替换空格题目描述：剑指 Offer 05. 替换空格 请实现一个函数，把字符串 s 中的每个空格替换成”%20”。 example 1: 输入：s &#x3D; &quot;We are happy.&quot; 输出：&quot;We%20are%20happy.&quo...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"101.对称二叉树","uid":"0db04708e016f3790cc78724de1cd91e","slug":"101-对称二叉树","date":"2022-09-23T13:05:24.000Z","updated":"2022-09-23T13:09:25.288Z","comments":true,"path":"api/articles/101-对称二叉树.json","keywords":null,"cover":null,"text":"101.对称二叉树题目描述：example 1： 1 | | 2 2 | | | | 3 4 4 3 输入：root &#x3D; [1,2,2,3,4,4,3] 输出：true example 2: 1 | | 2 2 | | 3 3 输入：root &#x3D; [1,2,2...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"102二叉树的层次遍历","uid":"833c2507cf941e2d538bb205a797d8ee","slug":"102二叉树的层次遍历","date":"2022-09-21T13:56:20.000Z","updated":"2022-09-21T13:58:43.623Z","comments":true,"path":"api/articles/102二叉树的层次遍历.json","keywords":null,"cover":null,"text":"102.二叉树的层次遍历题目描述： 二叉树的层序遍历 给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。 example 1: 输入：root &#x3D; [3,9,20,null,null,15,7] 输出：[[3],[9,20...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"1047.删除字符串中所有相邻重复项","uid":"1e9d09714216aecd266bb235c84e915f","slug":"1047-删除字符串中所有相邻重复项","date":"2022-09-16T15:21:54.000Z","updated":"2022-09-16T15:23:59.161Z","comments":true,"path":"api/articles/1047-删除字符串中所有相邻重复项.json","keywords":null,"cover":null,"text":"1047.删除字符串中所有相邻重复项题目描述： 删除字符串中的所有相邻重复项 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。 在 S 上反复执行重复项删除操作，直到无法继续删除。 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"105. 从前序与中序遍历序列构造二叉树","uid":"26c4b1d62f73766a69fff244a3f35602","slug":"105-从前序与中序遍历序列构造二叉树","date":"2022-10-03T12:52:58.000Z","updated":"2022-10-03T13:28:17.504Z","comments":true,"path":"api/articles/105-从前序与中序遍历序列构造二叉树.json","keywords":null,"cover":null,"text":"105.从前序与中序遍历序列构造二叉树题目描述： 从前序与中序遍历序列构造二叉树 给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。 example 1: 输入...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"106. 从中序与后序遍历序列构造二叉树","uid":"1dd4eb0dc067f1daee6408ed548f50e5","slug":"106-从中序与后序遍历序列构造二叉树","date":"2022-10-03T12:53:13.000Z","updated":"2022-10-03T13:37:34.390Z","comments":true,"path":"api/articles/106-从中序与后序遍历序列构造二叉树.json","keywords":null,"cover":null,"text":"106.从中序与后序遍历序列构造二叉树题目描述： 从中序与后序遍历序列构造二叉树 给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。 example 1:...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"108. 将有序数组转换为二叉搜索树","uid":"cdf15635a57976e279365fad106bd9e3","slug":"108-将有序数组转换为二叉搜索树","date":"2022-10-19T14:46:45.000Z","updated":"2022-10-19T14:50:09.263Z","comments":true,"path":"api/articles/108-将有序数组转换为二叉搜索树.json","keywords":null,"cover":null,"text":"108.将有序数组转换为二叉搜索树题目描述： 将有序数组转换为二叉搜索树 给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。 高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。 exampl...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"1091.二进制矩阵中的最短路径","uid":"401c664502fc1c05444b73fd7436e5f7","slug":"1091-二进制矩阵中的最短路径","date":"2022-08-13T02:39:07.000Z","updated":"2022-08-13T02:45:44.716Z","comments":true,"path":"api/articles/1091-二进制矩阵中的最短路径.json","keywords":null,"cover":null,"text":"1091.二进制矩阵中的最短路径题目描述： 二进制矩阵中的最短路径 难度中等214收藏分享切换为英文接收动态反馈 给你一个 n x n 的二进制矩阵 grid 中，返回矩阵中最短 畅通路径 的长度。如果不存在这样的路径，返回 -1 。 二进制矩阵中的 畅通路径 是一条从 左上角 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"110.平衡二叉树","uid":"21a7b5849c8515778a333234cc58b5b6","slug":"110-平衡二叉树","date":"2022-09-27T14:53:38.000Z","updated":"2022-09-27T14:56:16.541Z","comments":true,"path":"api/articles/110-平衡二叉树.json","keywords":null,"cover":null,"text":"110.平衡二叉树题目描述： 平衡二叉树 给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。 example 1: 输入：root &#x3D; [3,9,20,null,null,...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"111.二叉树的最小深度","uid":"5e70057312954f6211ec72bb65eb479c","slug":"111-二叉树的最小深度","date":"2022-09-24T14:45:07.000Z","updated":"2022-09-24T14:55:20.004Z","comments":true,"path":"api/articles/111-二叉树的最小深度.json","keywords":null,"cover":null,"text":"111.二叉树的最小深度问题描述： 二叉树的最小深度 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的节点。 example 1: 输入：root &#x3D; [3,9,20,null,null,15,7...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"112.路径综合","uid":"03aa7645b6656a5f9f59ee379b9ad29c","slug":"112-路径综合","date":"2022-10-01T15:19:03.000Z","updated":"2022-10-01T15:24:17.548Z","comments":true,"path":"api/articles/112-路径综合.json","keywords":null,"cover":null,"text":"112.路径综合题目描述： 路径总和 给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。 叶子节...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"142.环形链表Ⅱ","uid":"3775c9e904a11de6ad41f14528d2779f","slug":"142-环形链表Ⅱ","date":"2022-08-27T12:12:23.000Z","updated":"2022-08-27T12:18:55.647Z","comments":true,"path":"api/articles/142-环形链表Ⅱ.json","keywords":null,"cover":null,"text":"142.环形链表Ⅱ题目描述： 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"15.三数之和","uid":"6402807c619d1044cedb6c34299402ec","slug":"15-三数之和","date":"2022-08-31T01:40:26.000Z","updated":"2022-08-31T01:42:55.797Z","comments":true,"path":"api/articles/15-三数之和.json","keywords":null,"cover":null,"text":"15.三数之和题目描述： 三数之和 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"150. 逆波兰表达式求值","uid":"b64a14a9b898433644724b2c4c472c30","slug":"150-逆波兰表达式求值","date":"2022-09-17T00:27:04.000Z","updated":"2022-09-17T00:29:56.625Z","comments":true,"path":"api/articles/150-逆波兰表达式求值.json","keywords":null,"cover":null,"text":"150.逆波兰表达式求值题目描述： 逆波兰表达式求值 根据 逆波兰表示法，求表达式的值。 有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 注意 两个整数之间的除法只保留整数部分。 可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"151.反转字符串中的单词","uid":"bf3e3be4adc10fbd226da035ce8a9591","slug":"151-反转字符串中的单词","date":"2022-09-06T13:39:09.000Z","updated":"2022-09-06T13:42:34.894Z","comments":true,"path":"api/articles/151-反转字符串中的单词.json","keywords":null,"cover":null,"text":"151.反转字符串中的单词题目描述： 反转字符串中的单词 给你一个字符串 s ，请你反转字符串中 单词 的顺序。 单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。 返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。 注意：输入字符串...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"17.电话号码的字母组合","uid":"bd4de893333ca60e13361c93f6d4898d","slug":"17-电话号码的字母组合","date":"2022-10-28T15:38:55.000Z","updated":"2022-10-28T15:43:41.191Z","comments":true,"path":"api/articles/17-电话号码的字母组合.json","keywords":null,"cover":null,"text":"17.电话号码的字母组合题目描述： 电话号码的字母组合 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 example 1： 输入：digits &#x3D; ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":4,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"20.有效的括号","uid":"965581e4ba331d2a60f395aea86a2168","slug":"20-有效的括号","date":"2022-09-15T15:43:52.000Z","updated":"2022-09-15T15:46:45.717Z","comments":true,"path":"api/articles/20-有效的括号.json","keywords":null,"cover":null,"text":"20.有效的括号题目描述： 有效的括号 给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"202.快乐数","uid":"b036e493bdd6ef884e6984b888ff5e94","slug":"202-快乐数","date":"2022-08-29T13:03:42.000Z","updated":"2022-08-29T13:09:26.645Z","comments":true,"path":"api/articles/202-快乐数.json","keywords":null,"cover":null,"text":"202.快乐数题目描述： 快乐数 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」 定义为： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果这个过程 结果为 1，那么这个数就...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"203.移除链表元素","uid":"e036cd89658c33624bfd31dd2060c058","slug":"203-移除链表元素","date":"2022-08-20T01:35:04.000Z","updated":"2022-08-20T01:37:27.376Z","comments":true,"path":"api/articles/203-移除链表元素.json","keywords":null,"cover":null,"text":"203.移除链表元素题目描述： 移除链表元素 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 example 1: 输入：head &#x3D; [1,2,6,3,4,5,6], val &...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"206.反转链表","uid":"04d169a11d3cee4253a53c23de1dbd14","slug":"206-反转链表","date":"2022-08-23T13:56:14.000Z","updated":"2022-08-24T14:48:10.396Z","comments":true,"path":"api/articles/206-反转链表.json","keywords":null,"cover":null,"text":"206.反转链表题目描述： 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 example 1: 输入：head &#x3D; [1,2,3,4,5] 输出：[5,4,3,2,1] example 2: 输入：head &#x3D; [1,2] 输出...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"209.长度最小的子数组","uid":"3e8eaaf0906092af7ecd3983c1cdcff1","slug":"209-长度最小的子数组","date":"2022-08-19T12:21:28.000Z","updated":"2022-08-19T12:24:53.929Z","comments":true,"path":"api/articles/209-长度最小的子数组.json","keywords":null,"cover":null,"text":"209.长度最小的子数组题目描述： 长度最小的子数组 给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"216.组合总和Ⅲ","uid":"16a3361e9df66c3302f57a7e8e439d54","slug":"216-组合总和Ⅲ","date":"2022-10-27T15:01:56.000Z","updated":"2022-10-27T15:04:35.192Z","comments":true,"path":"api/articles/216-组合总和Ⅲ.json","keywords":null,"cover":null,"text":"216.组合总和Ⅲ题目描述： 组合总和 III 找出所有相加之和为 n 的 k 个数的组合，且满足下列条件： 只使用数字1到9 每个数字 最多使用一次 返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。 example 1: 输入: k &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":4,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"222.完全二叉树的节点个数","uid":"576c683ca9399adeb9bce96faa97dac2","slug":"222-完全二叉树的节点个数","date":"2022-09-25T14:17:21.000Z","updated":"2022-09-25T14:21:06.711Z","comments":true,"path":"api/articles/222-完全二叉树的节点个数.json","keywords":null,"cover":null,"text":"222.完全二叉树的节点个数题目描述： 完全二叉树的节点个数 给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。 完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"225.用队列实现栈","uid":"5411a6b47b43d9c6d288402eac141a08","slug":"225-用队列实现栈","date":"2022-09-14T14:46:17.000Z","updated":"2022-09-14T14:48:54.649Z","comments":true,"path":"api/articles/225-用队列实现栈.json","keywords":null,"cover":null,"text":"225.用队列实现栈问题描述： 用队列实现栈 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。 实现 MyStack 类： void push(int x) 将元素 x 压入栈顶。 int pop() 移...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"226.翻转二叉树","uid":"ef0dd3ab7debf38b3a6c2ed67270d73b","slug":"226-翻转二叉树","date":"2022-09-22T14:25:52.000Z","updated":"2022-09-22T14:31:11.456Z","comments":true,"path":"api/articles/226-翻转二叉树.json","keywords":null,"cover":null,"text":"226. 翻转二叉树题目描述：example 1: 4 | | 2 7 | | | | 1 3 6 9 4 | | 7 2 | | | | 9 6 3 1 输入：root &#x3D; [4,2,7,1,3,6,9] 输出：[4,7,2,9,6,3,1] example 2: 2...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"232.用栈实现队列","uid":"d91274a3d01b11b2d199e36958cb424f","slug":"232-用栈实现队列","date":"2022-09-12T11:50:50.000Z","updated":"2022-09-12T11:53:41.606Z","comments":true,"path":"api/articles/232-用栈实现队列.json","keywords":null,"cover":null,"text":"232.用栈实现队列题目描述： 用栈实现队列 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"236.二叉搜索树的最近公共祖先","uid":"2f59e63c36776555eba1dd17097990fc","slug":"236-二叉搜索树的最近公共祖先","date":"2022-10-11T03:12:26.000Z","updated":"2022-10-11T03:14:52.266Z","comments":true,"path":"api/articles/236-二叉搜索树的最近公共祖先.json","keywords":null,"cover":null,"text":"236.二叉搜索树的最近公共祖先题目描述： 二叉搜索树的最近公共祖先 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"236.二叉树的最近公共祖先","uid":"601c51b501c0367e52192a7f2085d7dc","slug":"236-二叉树的最近公共祖先","date":"2022-10-10T08:16:57.000Z","updated":"2022-10-10T08:19:39.138Z","comments":true,"path":"api/articles/236-二叉树的最近公共祖先.json","keywords":null,"cover":null,"text":"236.二叉树的最近公共祖先题目描述： 二叉树的最近公共祖先 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"239.滑动窗口的最大值","uid":"9087aaa078842eff85ab79f796fcf5f3","slug":"239-滑动窗口的最大值","date":"2022-09-18T05:03:58.000Z","updated":"2022-09-18T05:06:02.341Z","comments":true,"path":"api/articles/239-滑动窗口的最大值.json","keywords":null,"cover":null,"text":"239.滑动窗口的最大值题目描述： 滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。 返回 滑动窗口中的最大值 。 example 1: 输入：nums ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"栈和队列","slug":"栈和队列","count":6,"path":"api/tags/栈和队列.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"24.两两交换链表中的节点","uid":"997023f756e83c602ad393bfa331d66a","slug":"24-两两交换链表中的节点","date":"2022-08-24T14:35:56.000Z","updated":"2022-08-24T14:47:27.759Z","comments":true,"path":"api/articles/24-两两交换链表中的节点.json","keywords":null,"cover":null,"text":"24.两两交换链表中的节点题目描述： 两两交换链表中的节点 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 example1: 输入：head &#x3D; [1,2,3,4] 输出：[2,1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"242.有效的字母异位词","uid":"4b837d23486a4c7408641cab9ca86e52","slug":"242-有效的字母异位词","date":"2022-08-28T13:00:21.000Z","updated":"2022-08-28T13:05:14.925Z","comments":true,"path":"api/articles/242-有效的字母异位词.json","keywords":null,"cover":null,"text":"242.有效的字母异位词题目描述： 有效的字母异位词 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 注意：若 *s* 和 *t* 中每个字符出现的次数都相同，则称 *s* 和 *t* 互为字母异位词。 example 1： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"257.二叉树的所有路径","uid":"6c742a50ccef56ef00338cd62d89869a","slug":"257-二叉树的所有路径","date":"2022-09-29T13:48:25.000Z","updated":"2022-09-29T13:50:28.151Z","comments":true,"path":"api/articles/257-二叉树的所有路径.json","keywords":null,"cover":null,"text":"257.二叉树的所有路径题目描述： 二叉树的所有路径 给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。 叶子节点 是指没有子节点的节点。 example 1: 输入：root &#x3D; [1,2,3,null,5] 输出：[&quot;1...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"28.实现 strStr()","uid":"92bbfd2514ed32aedece3fa7e7cce0b7","slug":"28-实现-strStr","date":"2022-09-11T14:34:12.000Z","updated":"2022-09-11T14:37:46.446Z","comments":true,"path":"api/articles/28-实现-strStr.json","keywords":null,"cover":null,"text":"28.实现 strStr()题目描述： 实现 strStr() 实现 strStr() 函数。 给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。 说...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"343.整数拆分","uid":"6d961b2ba2212b262ffda24ad1b8896a","slug":"343-整数拆分","date":"2022-08-15T02:23:02.000Z","updated":"2022-08-15T02:25:11.605Z","comments":true,"path":"api/articles/343-整数拆分.json","keywords":null,"cover":null,"text":"343.整数拆分题目描述： 整数拆分 给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k &gt;= 2 ），并使这些整数的乘积最大化。 返回 你可以获得的最大乘积 。 example 1: 输入: n &#x3D; 2 输出: 1 解释: 2 &#x3D; 1 + 1...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"344.反转字符串","uid":"db3930f2bf194d71c39748bb27ba1de2","slug":"344-反转字符串","date":"2022-09-02T13:55:52.000Z","updated":"2022-09-02T13:57:51.486Z","comments":true,"path":"api/articles/344-反转字符串.json","keywords":null,"cover":null,"text":"344.反转字符串题目描述： 反转字符串 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。 不要给另外的数组分配额外的空间，你必须**原地修改输入数组**、使用 O(1) 的额外空间解决这一问题。 example 1: 输入：s &#x3D; ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"349.两个数组的交集","uid":"c18601503540d5650db70b6721599b9d","slug":"349-两个数组的交集","date":"2022-08-29T12:47:57.000Z","updated":"2022-08-29T12:50:21.782Z","comments":true,"path":"api/articles/349-两个数组的交集.json","keywords":null,"cover":null,"text":"349.两个数组的交集题目描述： 两个数组的交集 给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。 example 1: 输入：nums1 &#x3D; [1,2,2,1], nums2 &#...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"39.组合总和","uid":"053358390c8f453129938125fef59c98","slug":"39-组合总和","date":"2022-10-29T13:43:12.000Z","updated":"2022-10-29T13:45:36.737Z","comments":true,"path":"api/articles/39-组合总和.json","keywords":null,"cover":null,"text":"39.组合总和题目描述： 组合总和 给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。 candida...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":4,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}},"feature":true},{"title":"404.左叶子之和","uid":"4d298bda0eb98905fab53c1b930a261c","slug":"404-左叶子之和","date":"2022-09-30T14:44:06.000Z","updated":"2022-09-30T14:46:08.856Z","comments":true,"path":"api/articles/404-左叶子之和.json","keywords":null,"cover":null,"text":"404.左叶子之和题目描述： 左叶子之和 给定二叉树的根节点 root ，返回所有左叶子之和。 example 1： 输入: root &#x3D; [3,9,20,null,null,15,7] 输出: 24 解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"416.分割等和子集","uid":"be7f5c6dc71f9de739df383de800893c","slug":"416-分割等和子集","date":"2022-08-20T01:04:47.000Z","updated":"2022-08-20T01:11:13.233Z","comments":true,"path":"api/articles/416-分割等和子集.json","keywords":null,"cover":null,"text":"416.分割等和子集题目描述： 分割等和子集 给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。 example 1: 输入：nums &#x3D; [1,5,11,5] 输出：true 解释：数组可以分割成 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"450.删除二叉搜索树中的节点","uid":"4ddc27e8ab5fa8f62bf22aca925f034e","slug":"450-删除二叉搜索树中的节点","date":"2022-10-15T03:25:12.000Z","updated":"2022-10-15T03:28:21.883Z","comments":true,"path":"api/articles/450-删除二叉搜索树中的节点.json","keywords":null,"cover":null,"text":"450.删除二叉搜索树中的节点题目描述： 删除二叉搜索树中的节点 给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。 一般来说，删除节点可分为两个步骤： 首先找...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"454.四数相加Ⅱ","uid":"d39f1cd0e2f648b0b919de3afe262477","slug":"454-四数相加Ⅱ","date":"2022-08-31T01:01:44.000Z","updated":"2022-08-31T01:07:26.665Z","comments":true,"path":"api/articles/454-四数相加Ⅱ.json","keywords":null,"cover":null,"text":"454.四数相加Ⅱ题目描述： 四数相加 II 给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足： 0 &lt;= i, j, k, l &lt; n nums1[i] + nums2...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"459.重复的子字符串","uid":"d3c414b58259addf0d47c58705b851eb","slug":"459-重复的子字符串","date":"2022-09-10T12:17:28.000Z","updated":"2022-09-10T12:27:25.726Z","comments":true,"path":"api/articles/459-重复的子字符串.json","keywords":null,"cover":null,"text":"459.重复的子字符串题目描述： 重复的子字符串 给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。 example 1: 输入: s &#x3D; &quot;abab&quot; 输出: true 解释: 可由子串 &quot;ab&quot; 重复两次...","link":"","photos":[],"count_time":{"symbolsCount":805,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"501.二叉搜索树中的众数","uid":"4292498269ab452abce6e693ac1873b6","slug":"501-二叉搜索树中的众数","date":"2022-10-09T01:46:39.000Z","updated":"2022-10-09T01:48:34.411Z","comments":true,"path":"api/articles/501-二叉搜索树中的众数.json","keywords":null,"cover":null,"text":"501.二叉搜索树中的众数题目描述： 二叉搜索树中的众数 给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。 如果树中有不止一个众数，可以按 任意顺序 返回。 假定 BST 满足如下定义： 结点左子树中所含节...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"513.找树左下角的值","uid":"806f699ee80a6615fc5f8fc6dcffa078","slug":"513-找树左下角的值","date":"2022-09-30T15:03:56.000Z","updated":"2022-09-30T15:05:53.916Z","comments":true,"path":"api/articles/513-找树左下角的值.json","keywords":null,"cover":null,"text":"513.找树左下角的值题目描述： 找树左下角的值 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 example 1： 输入: root &#x3D; [2,1,3] 输出: 1 example 2: 输入: [1,...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"530.二叉搜索树的最小绝对值差","uid":"6226c398b825b38b91ad0079c34b0472","slug":"530-二叉搜索树的最小绝对值差","date":"2022-10-08T01:03:59.000Z","updated":"2022-10-08T01:06:27.840Z","comments":true,"path":"api/articles/530-二叉搜索树的最小绝对值差.json","keywords":null,"cover":null,"text":"530.二叉搜索树的最小绝对值差题目描述： 二叉搜索树的最小绝对差 给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。 差值是一个正数，其数值等于两值之差的绝对值。 example 1： 输入：root &#x3D; [4,2,6,1,3] 输出...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"538. 把二叉搜索树转换为累加树","uid":"02ff0e8752a89b69920bc0868292de56","slug":"538-把二叉搜索树转换为累加树","date":"2022-10-19T14:48:37.000Z","updated":"2022-10-19T14:51:27.465Z","comments":true,"path":"api/articles/538-把二叉搜索树转换为累加树.json","keywords":null,"cover":null,"text":"题目描述： 把二叉搜索树转换为累加树 给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。 提醒一下，二叉搜索树满足下列约束条件： 节点的左子树仅...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"541.反转字符串Ⅱ","uid":"097e37183692c086b0f10d951c3da4e4","slug":"541-反转字符串Ⅱ","date":"2022-09-03T13:23:56.000Z","updated":"2022-09-03T13:25:57.390Z","comments":true,"path":"api/articles/541-反转字符串Ⅱ.json","keywords":null,"cover":null,"text":"541.反转字符串Ⅱ题目描述： 反转字符串 II 给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。 如果剩余字符少于 k 个，则将剩余字符全部反转。 如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"59.螺旋矩阵Ⅱ","uid":"fb852bf52649b6773513d798310ccbeb","slug":"59-螺旋矩阵Ⅱ","date":"2022-08-19T12:59:09.000Z","updated":"2022-08-19T13:01:10.824Z","comments":true,"path":"api/articles/59-螺旋矩阵Ⅱ.json","keywords":null,"cover":null,"text":"59.螺旋矩阵Ⅱ题目描述： 螺旋矩阵 II 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 example 1: 输入：n &#x3D; 3 输出：[[1,2,3],[8,9,4],[7,6,5]...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"617.合并二叉树","uid":"df36dac409def39859c6c978ff85b201","slug":"617-合并二叉树","date":"2022-10-05T01:34:50.000Z","updated":"2022-10-05T01:37:39.793Z","comments":true,"path":"api/articles/617-合并二叉树.json","keywords":null,"cover":null,"text":"617.合并二叉树题目描述： 合并二叉树 给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"62.爬楼梯","uid":"0469ba4c963055a01468ddd6a005bdd0","slug":"62-爬楼梯","date":"2022-08-14T02:00:07.000Z","updated":"2022-08-14T02:13:04.740Z","comments":true,"path":"api/articles/62-爬楼梯.json","keywords":null,"cover":null,"text":"62.爬楼梯题目描述： 不同路径 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。 问总共有多少条不同的路径？ example 1: ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"63.不同路径Ⅱ","uid":"4c356b6b38bff815cbd4488ea4093633","slug":"63-不同路径Ⅱ","date":"2022-08-14T02:53:19.000Z","updated":"2022-08-14T02:55:56.829Z","comments":true,"path":"api/articles/63-不同路径Ⅱ.json","keywords":null,"cover":null,"text":"63.不同路径Ⅱ题目描述： 不同路径 II 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。 现在考虑网格中有障碍物。那么从左上角到右下...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"654.最大二叉树","uid":"de48b7aad10b18e063971ae0b35f5843","slug":"654-最大二叉树","date":"2022-10-04T01:34:03.000Z","updated":"2022-10-04T01:38:04.962Z","comments":true,"path":"api/articles/654-最大二叉树.json","keywords":null,"cover":null,"text":"654.最大二叉树题目描述： 最大二叉树 给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建: 创建一个根节点，其值为 nums 中的最大值。 递归地在最大值 左边 的 子数组前缀上 构建左子树。 递归地在最大值 右边 的 子数组后缀上 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"669.修剪二叉搜索树","uid":"c848947e0d06736e666ae1e637df0270","slug":"669-修剪二叉搜索树","date":"2022-10-16T03:19:25.000Z","updated":"2022-10-16T03:24:18.886Z","comments":true,"path":"api/articles/669-修剪二叉搜索树.json","keywords":null,"cover":null,"text":"669.修剪二叉搜索树题目描述： 修剪二叉搜索树 给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"70.爬楼梯","uid":"51d051a502cdfcaa3007846e503519d5","slug":"70-爬楼梯","date":"2022-08-13T04:05:38.000Z","updated":"2022-08-13T04:42:49.199Z","comments":true,"path":"api/articles/70-爬楼梯.json","keywords":null,"cover":null,"text":"70.爬楼梯题目描述： 爬楼梯 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ example 1: 输入：n &#x3D; 2 输出：2 解释：有两种方法可以爬到楼顶。 1. 1 阶 + 1 阶 2. 2 ...","link":"","photos":[],"count_time":{"symbolsCount":777,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"700.二叉搜索树中的搜索","uid":"4e6e4747e1b3af852c2bcbf832cc15bd","slug":"700-二叉搜索树中的搜索","date":"2022-10-06T01:18:40.000Z","updated":"2022-10-06T01:20:43.541Z","comments":true,"path":"api/articles/700-二叉搜索树中的搜索.json","keywords":null,"cover":null,"text":"700.二叉搜索树中的搜索题目描述： 二叉搜索树中的搜索 给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 example 1： 输入：root...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"701.二叉搜索树中的插入操作","uid":"de679446ce90a96213f1c24b7dcd05cc","slug":"701-二叉搜索树中的插入操作","date":"2022-10-12T02:51:28.000Z","updated":"2022-10-12T02:55:13.376Z","comments":true,"path":"api/articles/701-二叉搜索树中的插入操作.json","keywords":null,"cover":null,"text":"701.二叉搜索树中的插入操作题目描述： 二叉搜索树中的插入操作 给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。 注意，可能存在多种有效...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"746.使用最小的花费爬楼梯","uid":"8680cdb46230a68df8607aa6423f9a66","slug":"746-使用最小的花费爬楼梯","date":"2022-08-13T04:38:58.000Z","updated":"2022-08-13T04:42:04.365Z","comments":true,"path":"api/articles/746-使用最小的花费爬楼梯.json","keywords":null,"cover":null,"text":"746.花费最小的花费爬楼梯题目描述： 使用最小花费爬楼梯 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。 请你计算并返回...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"75.颜色排序--单指针","uid":"7543ffbb46b57fc1881ab7a5290f7749","slug":"75SortColors01","date":"2022-07-22T01:58:53.000Z","updated":"2022-07-22T02:02:20.450Z","comments":true,"path":"api/articles/75SortColors01.json","keywords":null,"cover":null,"text":"75. 颜色排序–单指针题目描述：Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are ad...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"77.组合","uid":"1b150da79eed14110a1dc1998320aec7","slug":"77-组合","date":"2022-10-24T15:30:39.000Z","updated":"2022-10-24T15:32:53.207Z","comments":true,"path":"api/articles/77-组合.json","keywords":null,"cover":null,"text":"77.组合题目描述： 组合 给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。 你可以按 任何顺序 返回答案。 example 1： 输入：n &#x3D; 4, k &#x3D; 2 输出： [ [2,4], [3,4], [2,3], [1,2]...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"回溯算法","slug":"回溯算法","count":4,"path":"api/tags/回溯算法.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"94&145&144.二叉树的中后前序遍历","uid":"ed6d09f7c666a266cc6ff445e8452d5b","slug":"94-145-144-二叉树的中后前序遍历","date":"2022-09-19T11:44:26.000Z","updated":"2022-09-19T11:51:12.740Z","comments":true,"path":"api/articles/94-145-144-二叉树的中后前序遍历.json","keywords":null,"cover":null,"text":"94&amp;145&amp;144.二叉树的中后前序遍历题目描述[中]： 二叉树的中序遍历 给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。 example 1: 输入：root &#x3D; [1,null,2,3] 输出：[1,3,2] example 2: ...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"96.不同的二叉搜索树","uid":"eea51d59bc355db9bbe09ae2654e00b2","slug":"96-不同的二叉搜索树","date":"2022-08-16T03:04:40.000Z","updated":"2022-08-16T03:06:47.875Z","comments":true,"path":"api/articles/96-不同的二叉搜索树.json","keywords":null,"cover":null,"text":"96.不同的二叉搜索树题目描述： 不同的二叉搜索树 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。 example 1: 输入：n &#x3D; 3 输出：5 example 2: 输入：n &...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"977.有序数组的平方","uid":"15073fb27fca9b3ab97a6db7836c4a4d","slug":"977-有序数组的平方","date":"2022-08-17T22:41:02.000Z","updated":"2022-08-17T22:46:02.610Z","comments":true,"path":"api/articles/977-有序数组的平方.json","keywords":null,"cover":null,"text":"977.有序数组的平方题目描述： 有序数组的平方 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 example 1: 输入：nums &#x3D; [-4,-1,0,3,10] 输出：[0,1,9,16,100...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"98.验证二叉搜索树","uid":"dd5945836ee2298d3cd22289ae215e69","slug":"98-验证二叉搜索树","date":"2022-10-07T00:54:24.000Z","updated":"2022-10-07T00:56:16.337Z","comments":true,"path":"api/articles/98-验证二叉搜索树.json","keywords":null,"cover":null,"text":"98.验证二叉搜索树问题描述： 验证二叉搜索树 给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。 有效 二叉搜索树定义如下： 节点的左子树只包含 小于 当前节点的数。 节点的右子树只包含 大于 当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 ex...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":26,"path":"api/tags/二叉树.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Assign Cookies","uid":"db0cb7674f2527793ee34b531f627ef0","slug":"Assign-Cookies","date":"2022-07-24T00:59:12.000Z","updated":"2022-07-24T01:03:06.320Z","comments":true,"path":"api/articles/Assign-Cookies.json","keywords":null,"cover":null,"text":"Assign Cookies题目描述：Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Bucket Sort","uid":"47c6968c5ee85e81112866938362b070","slug":"BucketSort","date":"2022-07-21T02:51:39.000Z","updated":"2022-07-21T02:57:04.319Z","comments":true,"path":"api/articles/BucketSort.json","keywords":null,"cover":null,"text":"桶排序介绍：&#x2F;* 桶排序是一个排序算法，工作原理是将数组分到有限数量的桶中。 每个桶内再进行个别排序（可以使用其他不同的排序算法实现）。 *&#x2F; 基本步骤： 设定一个基准，将待排序的数据按照一定的范围，从小到大平均分搭配N个桶中，此时，桶与桶之间已经排好序了，但...","link":"","photos":[],"count_time":{"symbolsCount":191,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"找到第k大的元素——快速排序","uid":"124012fd83870b9daa284761d75f9454","slug":"FindKthLargest","date":"2022-07-21T00:24:42.000Z","updated":"2022-07-21T00:56:06.830Z","comments":true,"path":"api/articles/FindKthLargest.json","keywords":null,"cover":null,"text":"Kth Largest Element in an Array——快速排序题目描述：Given an integer array nums and an integer k, return the kth largest element in the array. Note th...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Kth Largest Element in an Array——堆排序","uid":"b11e16d08ad1418b22f0f4722489b2fa","slug":"FindKthLargest01","date":"2022-07-21T00:45:06.000Z","updated":"2022-07-21T00:56:37.025Z","comments":true,"path":"api/articles/FindKthLargest01.json","keywords":null,"cover":null,"text":"Kth Largest Element in an Array——堆排序题目描述：Given an integer array nums and an integer k, return the kth largest element in the array. Note tha...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"列表导出为数组","uid":"3961e8d57cd72a6f65bba4c20e028616","slug":"ListtoArray","date":"2022-07-28T03:18:32.000Z","updated":"2022-07-28T03:27:01.168Z","comments":true,"path":"api/articles/ListtoArray.json","keywords":null,"cover":null,"text":"Java中List集合的toArray方法1. toArray() 当没有参数指定时，返回的数组中元素的类型是Object类型的。因为List在使用时一般会指定泛型，所以该方法是不常用的。 2.toArray(T[] a) leetcode-406使用到了该方法将列表对象转化为二...","link":"","photos":[],"count_time":{"symbolsCount":503,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"452.Minimum Number of Arrows to Burst Balloons","uid":"8c8ee24da1a163a01cda5376a75169b1","slug":"MinimumNumberofArrowstoBurstBalloons","date":"2022-07-27T02:11:15.000Z","updated":"2022-07-27T02:15:51.625Z","comments":true,"path":"api/articles/MinimumNumberofArrowstoBurstBalloons.json","keywords":null,"cover":null,"text":"452.Minimum Number of Arrows to Burst Balloons题目描述：There are some spherical balloons taped onto a flat wall that represents the XY-plane. Th...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Non—overlapping Intervals","uid":"0b469cb01192ec369bac9950f85cb59d","slug":"NonoverlappingIntervals","date":"2022-07-25T07:05:31.000Z","updated":"2022-07-25T07:15:26.096Z","comments":true,"path":"api/articles/NonoverlappingIntervals.json","keywords":null,"cover":null,"text":"435. Non-overlapping Intervals题目描述：Given an array of intervals intervals where intervals[i] &#x3D; [starti, endi], return the minimum number...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"PriorityQueue的简单使用","uid":"2233f52546249f8733475a932932ac4d","slug":"PriorityQueue_SimpleUse","date":"2022-07-20T03:10:24.000Z","updated":"2022-07-20T03:58:46.939Z","comments":true,"path":"api/articles/PriorityQueue_SimpleUse.json","keywords":null,"cover":null,"text":"Java中的优先队列Java中的PriorityQueue默认是小顶堆，逻辑上是堆，物理上是数组，每次取出的元素是最小的。【可以通过比较器的方式传入不同的比较规则】 特点： 实现了Queue接口 不允许放入null元素 插入方法： add()和offer(),前者插入失败抛出异常...","link":"","photos":[],"count_time":{"symbolsCount":640,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Sort Characters By Frequency_桶排序","uid":"28e06c560ccb367ab8fe61d12d122120","slug":"SortCharactersByFrequency-BucketSort","date":"2022-07-21T03:08:16.000Z","updated":"2022-07-21T03:10:47.828Z","comments":true,"path":"api/articles/SortCharactersByFrequency-BucketSort.json","keywords":null,"cover":null,"text":"Sort Characters By Frequency——桶排序题目描述：Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Sort Characters By Frequency","uid":"95fb99a87b0934d93a7b934555997ee9","slug":"SortCharactersByFrequency","date":"2022-07-21T02:12:13.000Z","updated":"2022-07-21T03:10:06.262Z","comments":true,"path":"api/articles/SortCharactersByFrequency.json","keywords":null,"cover":null,"text":"Sort Characters By Frequency题目描述：Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"Top K Frequent Elements","uid":"457fe231ac1330559343c50bbf83f171","slug":"TopKFrequentElements","date":"2022-07-21T01:11:44.000Z","updated":"2022-07-21T01:15:31.750Z","comments":true,"path":"api/articles/TopKFrequentElements.json","keywords":null,"cover":null,"text":"Top K Frequent Elements题目描述：Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"x的平方根","uid":"3b8822123bb08af7e60b15ed39819f81","slug":"x的平方根","date":"2022-08-04T01:36:47.000Z","updated":"2022-08-06T03:39:18.130Z","comments":true,"path":"api/articles/x的平方根.json","keywords":null,"cover":null,"text":"69. x的平方根题目描述：给你一个非负整数 x ，计算并返回 x 的 算术平方根 。 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。 example 1: 输入...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"不同的二叉搜索树Ⅱ","uid":"3a8637d28c1ed4973b1acb4bbd24e5f2","slug":"不同的二叉搜索树Ⅱ","date":"2022-08-12T02:59:34.000Z","updated":"2022-08-12T03:02:09.663Z","comments":true,"path":"api/articles/不同的二叉搜索树Ⅱ.json","keywords":null,"cover":null,"text":"95.不同的二叉搜索树Ⅱ题目描述： 不同的二叉搜索树 II 给你一个整数 n ，请你生成并返回所有由 n 个节点组成且节点值从 1 到 n 互不相同的不同 二叉搜索树 。可以按 任意顺序 返回答案。 example 1: 输入：n &#x3D; 3 输出：[[1,null,2,n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"为运算表达式设计优先级","uid":"a2d24fc395bf8cf342e3b277c21f191b","slug":"为运算表达式设计优先级","date":"2022-08-12T02:29:37.000Z","updated":"2022-08-12T02:34:59.010Z","comments":true,"path":"api/articles/为运算表达式设计优先级.json","keywords":null,"cover":null,"text":"241.为运算表达式设计优先级题目描述： 为运算表达式设计优先级 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。 生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"买股票的最佳时机","uid":"5d7c6d0b72a0ac167a5663e12c3dcdf4","slug":"买股票的最佳时机","date":"2022-07-29T01:41:19.000Z","updated":"2022-07-29T01:45:17.659Z","comments":true,"path":"api/articles/买股票的最佳时机.json","keywords":null,"cover":null,"text":"121. 买股票的最佳时机题目描述：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。 返回你可以从这笔...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"划分字母区间","uid":"b3d8a41da3eeb7700876b944e097bd03","slug":"划分字母区间","date":"2022-08-03T02:16:17.000Z","updated":"2022-08-03T02:18:46.609Z","comments":true,"path":"api/articles/划分字母区间.json","keywords":null,"cover":null,"text":"763.划分字母区间题目描述：763. 划分字母区间字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。 example 1: 输入：S &#x3D; &quot;ababcbacadefegd...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"判断子序列","uid":"82a606d2417be24205d07d3a23121174","slug":"判断子序列","date":"2022-07-31T03:01:34.000Z","updated":"2022-07-31T03:03:49.790Z","comments":true,"path":"api/articles/判断子序列.json","keywords":null,"cover":null,"text":"392.判断子序列题目描述：给定字符串 s 和 t ，判断 s 是否为 t 的子序列。 字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。 example 1: 输...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"剑指Offer58-II.左旋转字符串","uid":"2416193f75be6eeb61e08489a1aa53a0","slug":"剑指Offer58-II-左旋转字符串","date":"2022-09-07T13:28:59.000Z","updated":"2022-09-07T13:31:09.531Z","comments":true,"path":"api/articles/剑指Offer58-II-左旋转字符串.json","keywords":null,"cover":null,"text":"剑指Offer58-II.左旋转字符串题目描述：剑指 Offer 58 - II. 左旋转字符串 字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"买卖股票的最佳时机2","uid":"6b879bd90cb55e176f69ea7d49b28d19","slug":"卖出股票的最佳时机2","date":"2022-07-29T02:18:33.000Z","updated":"2022-07-29T02:20:44.442Z","comments":true,"path":"api/articles/卖出股票的最佳时机2.json","keywords":null,"cover":null,"text":"122. 买卖股票的最佳时机2题目描述：给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。 在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。 返回 你能获...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找峰值","uid":"d84518667e657cd3814bae0fb73c941b","slug":"寻找峰值","date":"2022-08-08T03:00:38.000Z","updated":"2022-08-08T03:03:05.770Z","comments":true,"path":"api/articles/寻找峰值.json","keywords":null,"cover":null,"text":"162. 寻找峰值题目描述：162. 寻找峰值峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞ 。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找旋转排序数组中的最小值","uid":"8d8d1a0d9f17dbec885c291446cece5c","slug":"寻找旋转排序数组中的最小值","date":"2022-08-08T03:56:07.000Z","updated":"2022-08-08T03:59:15.533Z","comments":true,"path":"api/articles/寻找旋转排序数组中的最小值.json","keywords":null,"cover":null,"text":"153.寻找旋转排序数组中的最小值题目描述：153. 寻找旋转排序数组中的最小值已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"寻找比目标字母大的最小字母","uid":"d776ea82847944d1f9a7d73d3912befe","slug":"寻找比目标字母大的最小字母","date":"2022-08-05T01:53:07.000Z","updated":"2022-08-06T01:49:47.773Z","comments":true,"path":"api/articles/寻找比目标字母大的最小字母.json","keywords":null,"cover":null,"text":"744. 寻找比目标字母大的最小字母题目描述：给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。 在比较时，字母是依序循环出现的。举个例子： 如果目标字母 target &#x3...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"搜索旋转排序数组","uid":"ea76d2e3b8ba7df05f2a9007a5c4d57e","slug":"搜索旋转排序数组","date":"2022-08-07T02:54:15.000Z","updated":"2022-08-07T02:57:32.605Z","comments":true,"path":"api/articles/搜索旋转排序数组.json","keywords":null,"cover":null,"text":"33. 搜索旋转排序数组题目描述：33. 搜索旋转排序数组整数数组 nums 按升序排列，数组中的值 互不相同 。 在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"509.斐波那契数列","uid":"084b6d4a3eb1719c740e694cde17f8e9","slug":"斐波那契数列","date":"2022-08-13T03:54:49.000Z","updated":"2022-08-13T04:42:40.478Z","comments":true,"path":"api/articles/斐波那契数列.json","keywords":null,"cover":null,"text":"509.斐波那契数列 斐波那契数 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) &#x3D; 0，F(1) &#x3D; 1 F(n) &#x3D; F(n - 1) +...","link":"","photos":[],"count_time":{"symbolsCount":967,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"动态规划","slug":"动态规划","count":7,"path":"api/tags/动态规划.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"最大子数组和","uid":"f6c56b941ed067956656bab8c3d0bb61","slug":"最大子数组和","date":"2022-08-02T01:22:15.000Z","updated":"2022-08-02T01:26:05.471Z","comments":true,"path":"api/articles/最大子数组和.json","keywords":null,"cover":null,"text":"最大子数组和题目描述： 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部分。 example 1: 输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4] ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"有序数组的单一元素","uid":"5a834cb8bdd34deef00d023624eeeb11","slug":"有序数组的单一元素","date":"2022-08-06T02:23:53.000Z","updated":"2022-08-06T02:26:09.675Z","comments":true,"path":"api/articles/有序数组的单一元素.json","keywords":null,"cover":null,"text":"540. 有序数组的单一元素题目描述： 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。 请你找出并返回只出现一次的那个数。 你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。 example 1： 输入: nums...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"根据身高重建队列","uid":"17c36b5674ca98b6f74033f762d79de8","slug":"根据身高重建队列","date":"2022-07-28T03:13:52.000Z","updated":"2022-07-28T03:16:54.318Z","comments":true,"path":"api/articles/根据身高重建队列.json","keywords":null,"cover":null,"text":"406.根据身高重建队列题目描述：假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] &#x3D; [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。 请你...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"种花问题","uid":"17a5d31322fb6873ed3794c44302ea45","slug":"种花问题","date":"2022-07-30T01:41:20.000Z","updated":"2022-07-30T01:44:14.639Z","comments":true,"path":"api/articles/种花问题.json","keywords":null,"cover":null,"text":"605.种花问题题目描述：假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。 给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"第一个错误版本","uid":"37fafcaad932621c324a857d69f2ce34","slug":"第一个错误版本","date":"2022-08-08T02:00:30.000Z","updated":"2022-08-08T02:10:52.932Z","comments":true,"path":"api/articles/第一个错误版本.json","keywords":null,"cover":null,"text":"278.第一个错误版本题目描述：278. 第一个错误的版本你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}},{"title":"非递减数列","uid":"ec406ffdb14348b593a8eaccf18d5ae3","slug":"非递减数列","date":"2022-08-01T02:10:59.000Z","updated":"2022-08-01T02:13:53.891Z","comments":true,"path":"api/articles/非递减数列.json","keywords":null,"cover":null,"text":"非递减数列题目描述：665. 非递减数列难度中等681收藏分享切换为英文接收动态反馈 给你一个长度为 n 的整数数组 nums ，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。 我们是这样定义一个非递减数列的： 对于数组中任意的 i (0 &lt;= ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":91,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Java","slug":"Java","count":94,"path":"api/tags/Java.json"},{"name":"leetcode","slug":"leetcode","count":90,"path":"api/tags/leetcode.json"}],"author":{"name":"LiuQuanZe","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"a good guy!","socials":{"github":"https://github.com/liuquanze","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45895853","juejin":"","customs":{}}}}]}